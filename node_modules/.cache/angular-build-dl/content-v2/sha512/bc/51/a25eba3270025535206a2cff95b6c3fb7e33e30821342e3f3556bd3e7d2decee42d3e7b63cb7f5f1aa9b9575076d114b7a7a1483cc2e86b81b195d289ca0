{"version":3,"sources":["./src/app/authentication/auth.guard.ts","./src/app/authentication/authentication-routing.module.ts","./src/app/authentication/authentication.module.ts","./src/app/authentication/authentication.service.ts","./src/app/authentication/forgot-password/forgot-password.component.ts","./src/app/authentication/forgot-password/forgot-password.component.html","./src/app/authentication/locked/locked.component.ts","./src/app/authentication/locked/locked.component.html","./src/app/authentication/page404/page404.component.ts","./src/app/authentication/page404/page404.component.html","./src/app/authentication/page500/page500.component.ts","./src/app/authentication/page500/page500.component.html","./src/app/authentication/random.guard.ts","./src/app/authentication/signin/signin.component.ts","./src/app/authentication/signin/signin.component.html","./src/app/authentication/signup/signup.component.ts","./src/app/authentication/signup/signup.component.html","./src/app/authentication/token.interceptor.ts"],"names":[],"mappings":"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","file":"authentication-authentication-module-es2015.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { CanActivate,Router } from '@angular/router';\r\nimport { AuthService } from './authentication.service';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n  })\r\n  export class AuthGuard implements CanActivate {\r\n  \r\n    constructor(private authService: AuthService, private router: Router) { }\r\n  \r\n    canActivate() {\r\n      if (this.authService.isLoggedIn()) {\r\n        this.router.navigate(['/calendar']);\r\n      }\r\n      return !this.authService.isLoggedIn();\r\n    }\r\n  }","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { SigninComponent } from './signin/signin.component';\r\nimport { SignupComponent } from './signup/signup.component';\r\nimport { ForgotPasswordComponent } from './forgot-password/forgot-password.component';\r\nimport { LockedComponent } from './locked/locked.component';\r\nimport { Page404Component } from './page404/page404.component';\r\nimport { Page500Component } from './page500/page500.component';\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    redirectTo: 'signin',\r\n    pathMatch: 'full'\r\n  },\r\n  {\r\n    path: 'signin',\r\n    component: SigninComponent\r\n  },\r\n  {\r\n    path: 'signup',\r\n    component: SignupComponent\r\n  },\r\n  {\r\n    path: 'forgot-password',\r\n    component: ForgotPasswordComponent\r\n  },\r\n  {\r\n    path: 'locked',\r\n    component: LockedComponent\r\n  },\r\n  {\r\n    path: 'page404',\r\n    component: Page404Component\r\n  },\r\n  {\r\n    path: 'page500',\r\n    component: Page500Component\r\n  }\r\n];\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AuthenticationRoutingModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { AuthenticationRoutingModule } from './authentication-routing.module';\r\nimport { Page500Component } from './page500/page500.component';\r\nimport { Page404Component } from './page404/page404.component';\r\nimport { SigninComponent } from './signin/signin.component';\r\nimport { SignupComponent } from './signup/signup.component';\r\nimport { LockedComponent } from './locked/locked.component';\r\nimport { ForgotPasswordComponent } from './forgot-password/forgot-password.component';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { AuthGuard } from '../authentication/auth.guard';\r\nimport { RandomGuard } from '../authentication/random.guard';\r\nimport { AuthService } from '../authentication/authentication.service';\r\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\r\nimport { TokenInterceptor } from '../authentication/token.interceptor';\r\n@NgModule({\r\n  declarations: [\r\n    Page500Component,\r\n    Page404Component,\r\n    SigninComponent,\r\n    SignupComponent,\r\n    LockedComponent,\r\n    ForgotPasswordComponent\r\n  ],\r\n  providers:[\r\n    AuthGuard,\r\n    RandomGuard,\r\n    AuthService,\r\n    {\r\n      provide: HTTP_INTERCEPTORS,\r\n      useClass: TokenInterceptor,\r\n      multi:true\r\n    }\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    AuthenticationRoutingModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatIconModule,\r\n    MatButtonModule\r\n  ]\r\n})\r\nexport class AuthenticationModule {}\r\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { AuthData,RegisterUser, RequestData, EmailCheck, changePassword,changeUsername,UserOne } from './auth-data.model';\nimport { catchError, mapTo, tap } from 'rxjs/operators';\nimport { AuthenticationClass, RootObject } from '../classes/auth';\nimport { Token } from '../classes/token';\nimport { Observable, of } from 'rxjs';\nimport { environment } from '../../environments/environment';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n@Injectable({ providedIn: \"root\" })\nexport class AuthService {\n  private readonly JWT_TOKEN = 'JWT_TOKEN';\n  private readonly REFRESH_TOKEN = 'REFRESH_TOKEN';\n  private loggedUser: String;\n  private readonly API_URL = environment.apiBaseURL + 'auth/login';\n  //dialogData: any; authData\n  constructor(private httpClient: HttpClient, private router: Router,\n    private snackBar: MatSnackBar) {\n  }\n\n  /** CRUD METHODS */\n  getAuthentication(email: String, password: String): Observable<Boolean> {\n    try {\n      const authData: AuthData = { user_email: email, user_password: password };\n      return this.httpClient.post<RootObject>(environment.apiBaseURL + 'api/login', authData)\n        .pipe(\n          tap(tokens => {\n            if (tokens.Response == \"Success\") {\n              // sessionStorage.setItem(\"login_pswd\", password.toString());\n              // this.doLoginUser(email, tokens);\n              this.showNotification(\n                'snackbar-success',\n                'Registered Successfully...!!!',\n                'bottom',\n                'center'\n              );\n              return of(true);\n            } else {\n              this.showNotification(\n                'snackbar-danger',\n                tokens.Result,\n                'bottom',\n                'center'\n              );\n              return of(false);\n            }\n            //sessionStorage.setItem(\"login_id\", tokens);\n          }\n          ),\n          mapTo(true),\n          catchError(error => {\n            this.showNotification(\n              'snackbar-danger',\n              'Invalid User',\n              'bottom',\n              'center'\n            );\n            return of(false);\n          }));\n\n    } catch (error) {\n      //console.log(error);\n    }\n\n  }\n  \n  registerUser(firstname:String,lastname:String,email: String, password: String): Observable<Boolean> {\n    console.log(environment.apiBaseURL);\n    try {\n      const registerData: RegisterUser = {user_first_name:firstname,user_last_name:lastname, user_email: email, user_password: password,user_status:\"\" };\n      return this.httpClient.post<RootObject>(environment.apiBaseURL + 'api/signup', registerData)\n        .pipe(\n          tap(tokens => {\n            if (tokens.Response == \"Success\") {\n              sessionStorage.setItem(\"login_pswd\", password.toString());\n              this.doLoginUser(email, tokens);\n            } else {\n              this.showNotification(\n                'snackbar-danger',\n                'Invalid User',\n                'bottom',\n                'center'\n              );\n              return of(false);\n            }\n            //sessionStorage.setItem(\"login_id\", tokens);\n          }\n          ),\n          mapTo(true),\n          catchError(error => {\n            this.showNotification(\n              'snackbar-danger',\n              'Invalid User',\n              'bottom',\n              'center'\n            );\n            return of(false);\n          }));\n\n    } catch (error) {\n      //console.log(error);\n    }\n\n  }\n\n  showNotification(colorName, text, placementFrom, placementAlign) {\n    this.snackBar.open(text, '', {\n      duration: 2000,\n      verticalPosition: placementFrom,\n      horizontalPosition: placementAlign,\n      panelClass: colorName,\n    });\n  }\n\n  logout() {\n    return this.httpClient.post<any>(environment.apiBaseURL + 'auth/logout', {\n      'refreshToken': this.getRefreshToken()\n    }).pipe(\n      tap(() => this.doLogoutUser()),\n      mapTo(true),\n      catchError(error => {\n        //(error.error);\n        return error.error;\n      }));\n  }\n\n  checkOTP(action: String, otp: String): Observable<Boolean> {\n    try {\n      // const authData: AuthData = { login_username: username, login_password: password };\n      // ////console.log(authData);\n      // return this.httpClient.post<RootObject>(environment.apiBaseURL + 'auth/login', authData)\n      //   .pipe(\n      //     tap(tokens => {\n      //       ////console.log(tokens);\n      //       //sessionStorage.setItem(\"login_id\", tokens);\n      //       this.doLoginUser(username, tokens)\n      //     }\n      //     ),\n      //     mapTo(true),\n      //     catchError(error => {\n      //       this.showNotification(\n      //         'snackbar-danger',\n      //         'Invalid User',\n      //         'bottom',\n      //         'center'\n      //       );\n      return of(false);\n      //     }));\n\n    } catch (error) {\n      //console.log(error);\n    }\n\n  }\n\n  // ------------- forgot Password ------------\n\n  Forgotemailpassword(action: String, email: String): Observable<any> {\n    //console.log(action);\n    // const authorization = { Authorization: `${sessionStorage.getItem(\"authorization\")}` };\n    // if (action == \"1\") {\n      const emailCheck: EmailCheck = { email: email, request: \"username\" };\n    //   //console.log(emailCheck);\n    //   return this.httpClient.post<any>(environment.apiBaseURL + 'forgetpassword/passwordchangeotp', emailCheck)\n    // } else if (action == \"2\") {\n    //   const emailCheck: EmailCheck = { login_email: email, request: \"password\" };\n    //   return this.httpClient.post<any>(environment.apiBaseURL + 'forgetpassword/passwordchangeotp', emailCheck)\n    // } else if (action == \"3\") {\n    //   const emailCheck: EmailCheck = { login_email: email, request: \"username\" };\n    //   return this.httpClient.post<any>(environment.apiBaseURL + 'forgetpassword/requestusernamepassword', emailCheck)\n    // } else if (action == \"4\") {\n    //   const emailCheck: EmailCheck = { login_email: email, request: \"username\" };\n    //   return this.httpClient.post<any>(environment.apiBaseURL + 'forgetpassword/requestusernamepassword', emailCheck)\n    // } else {\n    //   //\n    // }\n    return this.httpClient.post<any>(environment.apiBaseURL + 'forgetpassword/passwordchangeotp', emailCheck)\n  }\n\n  // ------------- forgot Password ------------\n\n  // ------------- change Username / Password ------------\n\n  requestusernamepassword(action: string, request: string, email: string) {\n    //console.log(\"hello\");\n    const authorization = { Authorization: `${sessionStorage.getItem(\"authorization\")}` };\n    const requestData: RequestData = { email: email, request: request, authorization: authorization };\n    return this.httpClient.post<any>(environment.apiBaseURL + 'changepassword/requestusernamepassword', requestData)\n  }\n\n  changeusername(action: String, newUname: string,login_id:string,login_email:string) {\n    const authorization = { Authorization: `${sessionStorage.getItem(\"authorization\")}` };\n    if (action == \"1\") {\n      const changeUsername: changeUsername = { login_id: login_id,login_email: login_email, username: newUname, authorization: \"\" };\n      return this.httpClient.post<any>(environment.apiBaseURL + 'forgetpassword/forgetusername', changeUsername)\n    }else if (action == \"request_username\") {\n      const changeUsername: changeUsername = { login_id: login_id,login_email: login_email, username: newUname, authorization: \"\" };\n      console.log(changeUsername);\n      return this.httpClient.post<any>(environment.apiBaseURL + 'changepassword/changeusername', changeUsername)\n    }\n  }\n\n  changepassword(action: String, newPswd: string,login_id:string,login_email:string) {\n    const authorization = { Authorization: `${sessionStorage.getItem(\"authorization\")}` };\n    if (action == \"2\") {\n      const changePassword: changePassword = { login_id: login_id,login_email: login_email, password: newPswd, authorization: \"\" };\n      return this.httpClient.post<any>(environment.apiBaseURL + 'forgetpassword/forgetpassword', changePassword)\n    } else if (action == \"5\" || action == \"request_password\") {\n      const changePassword: changePassword = { login_id: login_id,login_email: login_email, password: newPswd, authorization: authorization };\n      console.log(changePassword);\n      return this.httpClient.post<any>(environment.apiBaseURL + 'changepassword/changepassword', changePassword)\n    }\n  }\n\n  // ------------- // change Username / Password ------------\n\n  // ------------- // Get Users -----------------------------\n\n\n  getRequestUser(role_id:string,login_id:string): any {\n    const authorization = { Authorization: `${sessionStorage.getItem(\"authorization\")}` };\n    const userOne:UserOne={role_id:role_id,login_id:login_id,authorization:authorization}\n    console.log(userOne);\n    return this.httpClient.post<any>(environment.apiBaseURL + 'changepassword/getUserOne',userOne)    \n  }\n  \n  // ------------- // Get Users -----------------------------\n\n  isLoggedIn() {\n    return !!this.getJwtToken();\n  }\n\n  refreshToken() {\n    //alert(\"tokk \" + this.getRefreshToken());\n    return this.httpClient.post<any>(environment.apiBaseURL + 'auth/refresh', {\n      'refreshToken': this.getRefreshToken()\n    }).pipe(tap((tokens: RootObject) => {\n      //console.log(\"refreshed\");\n      this.storeJwtToken(tokens.Result[0].token);\n    }));\n  }\n\n  getJwtToken() {\n    return localStorage.getItem(this.JWT_TOKEN);\n  }\n\n  private doLoginUser(email: String, tokens: RootObject) {\n    this.loggedUser = email;\n    this.storeTokens(tokens);\n  }\n\n  private doLogoutUser() {\n    this.loggedUser = null;\n    this.removeTokens();\n  }\n\n  private getRefreshToken() {\n    return localStorage.getItem(this.REFRESH_TOKEN);\n  }\n\n  private storeJwtToken(jwt: string) {\n    localStorage.setItem(this.JWT_TOKEN, jwt);\n  }\n\n  private storeTokens(tokens: RootObject) {\n    sessionStorage.setItem(\"user_id\", tokens.Result[0].user_id.toString());\n    sessionStorage.setItem(\"tabIndex\", \"1\");\n    sessionStorage.setItem(\"authorization\", tokens.Result[0].token);\n    localStorage.setItem(this.JWT_TOKEN, tokens.Result[0].token);\n    localStorage.setItem(this.REFRESH_TOKEN, tokens.Result[0].refreshToken);\n  }\n\n  private removeTokens() {\n    localStorage.removeItem(this.JWT_TOKEN);\n    localStorage.removeItem(this.REFRESH_TOKEN);\n    sessionStorage.clear();\n    this.router.navigate(['/authentication/signin']);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\n@Component({\r\n  selector: 'app-forgot-password',\r\n  templateUrl: './forgot-password.component.html',\r\n  styleUrls: ['./forgot-password.component.scss']\r\n})\r\nexport class ForgotPasswordComponent implements OnInit {\r\n  loginForm: FormGroup;\r\n  submitted = false;\r\n  returnUrl: string;\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private route: ActivatedRoute,\r\n    private router: Router\r\n  ) {}\r\n  ngOnInit() {\r\n    this.loginForm = this.formBuilder.group({\r\n      username: ['', Validators.required]\r\n    });\r\n    // get return url from route parameters or default to '/'\r\n    this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\r\n  }\r\n  get f() {\r\n    return this.loginForm.controls;\r\n  }\r\n  onSubmit() {\r\n    this.submitted = true;\r\n    // stop here if form is invalid\r\n    if (this.loginForm.invalid) {\r\n      return;\r\n    } else {\r\n      this.router.navigate(['/dashboard/main']);\r\n    }\r\n  }\r\n}\r\n","<div class=\"limiter\">\r\n  <div class=\"container-login100\">\r\n    <div class=\"wrap-login100\">\r\n      <form class=\"login100-form validate-form\" [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\">\r\n        <span class=\"login100-form-title p-b-45\">\r\n          Reset Password\r\n        </span>\r\n        <span class=\"error-subheader2 p-t-20 p-b-15\">\r\n          Enter your registered email address.\r\n        </span>\r\n        <div class=\"form-group mb-5\">\r\n          <mat-form-field class=\"example-full-width\" appearance=\"outline\">\r\n            <mat-label>Username</mat-label>\r\n            <input matInput formControlName=\"username\" required>\r\n            <mat-icon matSuffix>face</mat-icon>\r\n            <mat-error *ngIf=\"loginForm.get('username').hasError('required')\">\r\n              Username is required\r\n            </mat-error>\r\n          </mat-form-field>\r\n        </div>\r\n        <div class=\"container-login100-form-btn\">\r\n          <button mat-flat-button color=\"primary\" class=\"login100-form-btn\" type=\"submit\">\r\n            Reset My Password\r\n          </button>\r\n        </div>\r\n        <div class=\"w-full p-t-25 text-center\">\r\n          <div>\r\n            <a routerLink=\"/authentication/signin\" class=\"txt1\">\r\n              Login?\r\n            </a>\r\n          </div>\r\n        </div>\r\n      </form>\r\n      <div class=\"login100-more\" style=\"background-image: url('assets/images/pages/bg-02.png');\">\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\n@Component({\r\n  selector: 'app-locked',\r\n  templateUrl: './locked.component.html',\r\n  styleUrls: ['./locked.component.scss']\r\n})\r\nexport class LockedComponent implements OnInit {\r\n  loginForm: FormGroup;\r\n  submitted = false;\r\n  returnUrl: string;\r\n  hide = true;\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private route: ActivatedRoute,\r\n    private router: Router\r\n  ) {}\r\n  ngOnInit() {\r\n    this.loginForm = this.formBuilder.group({\r\n      password: ['', Validators.required]\r\n    });\r\n    // get return url from route parameters or default to '/'\r\n    this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\r\n  }\r\n  get f() {\r\n    return this.loginForm.controls;\r\n  }\r\n  onSubmit() {\r\n    this.submitted = true;\r\n    // stop here if form is invalid\r\n    if (this.loginForm.invalid) {\r\n      return;\r\n    } else {\r\n      this.router.navigate(['/dashboard/main']);\r\n    }\r\n  }\r\n}\r\n","<div class=\"limiter\">\r\n  <div class=\"container-login100\">\r\n    <div class=\"wrap-login100\">\r\n      <form class=\"login100-form validate-form\" [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\">\r\n        <div class=\"login100-form-logo\">\r\n          <div class=\"image\">\r\n            <img src=\"assets/images/usrbig.jpg\" alt=\"User\">\r\n          </div>\r\n        </div>\r\n        <span class=\"login100-form-title p-b-34 p-t-27\">\r\n          Emily Smith\r\n        </span>\r\n        <div class=\"text-center\">\r\n          <p class=\"txt1 p-b-20\">\r\n            Locked\r\n          </p>\r\n        </div>\r\n        <div class=\"form-group mb-3\">\r\n          <mat-form-field class=\"example-full-width\" appearance=\"outline\">\r\n            <mat-label>Password</mat-label>\r\n            <input matInput formControlName=\"password\" [type]=\"hide ? 'password' : 'text'\" required>\r\n            <mat-icon matSuffix (click)=\"hide = !hide\">\r\n              {{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\r\n            <mat-error *ngIf=\"loginForm.get('password').hasError('required')\">\r\n              Password is required\r\n            </mat-error>\r\n          </mat-form-field>\r\n        </div>\r\n        <div class=\"container-login100-form-btn p-t-30\">\r\n          <button mat-flat-button color=\"primary\" class=\"login100-form-btn\">\r\n            Login\r\n          </button>\r\n        </div>\r\n        <div class=\"w-full p-t-15 p-b-15 text-center\">\r\n          <div>\r\n            <a href=\"#\" class=\"txt1\">\r\n              Need Help?\r\n            </a>\r\n          </div>\r\n        </div>\r\n      </form>\r\n      <div class=\"login100-more\" style=\"background-image: url('assets/images/pages/bg-01.png');\">\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\n@Component({\r\n  selector: 'app-page404',\r\n  templateUrl: './page404.component.html',\r\n  styleUrls: ['./page404.component.scss'],\r\n})\r\nexport class Page404Component implements OnInit {\r\n  constructor() {}\r\n  ngOnInit() {}\r\n}\r\n","<div class=\"limiter\">\r\n  <div class=\"container-login100\">\r\n    <div class=\"wrap-login100\">\r\n      <form class=\"login100-form\">\r\n        <span class=\"error-header p-b-45\">\r\n          404\r\n        </span>\r\n        <span class=\"error-subheader p-b-5\">\r\n          Looks Like You're Lost\r\n        </span>\r\n        <span class=\"error-subheader2 p-b-5\">\r\n          The Page You Are Looking For Not Available!\r\n        </span>\r\n        <div class=\"container-login100-form-btn p-t-30\t\">\r\n          <button mat-flat-button color=\"primary\" class=\"login100-form-btn\">\r\n            Go To Home Page\r\n          </button>\r\n        </div>\r\n        <div class=\"w-full p-t-15 p-b-15 text-center\">\r\n          <div>\r\n            <a href=\"#\" class=\"txt1\">\r\n              Need Help?\r\n            </a>\r\n          </div>\r\n        </div>\r\n      </form>\r\n      <div class=\"login100-more\" style=\"background-image: url('assets/images/pages/bg-03.png');\">\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\n@Component({\r\n  selector: 'app-page500',\r\n  templateUrl: './page500.component.html',\r\n  styleUrls: ['./page500.component.scss'],\r\n})\r\nexport class Page500Component implements OnInit {\r\n  constructor() {}\r\n  ngOnInit() {}\r\n}\r\n","<div class=\"limiter\">\r\n  <div class=\"container-login100\">\r\n    <div class=\"wrap-login100\">\r\n      <form class=\"login100-form\">\r\n        <span class=\"error-header p-b-45\">\r\n          500\r\n        </span>\r\n        <span class=\"error-subheader2 p-b-5\">\r\n          Oops, Something went wrong. Please try after some times.\r\n        </span>\r\n        <div class=\"container-login100-form-btn p-t-30\t\">\r\n          <button mat-flat-button color=\"primary\" class=\"login100-form-btn\">\r\n            Go To Home Page\r\n          </button>\r\n        </div>\r\n        <div class=\"w-full p-t-15 p-b-15 text-center\">\r\n          <div>\r\n            <a href=\"#\" class=\"txt1\">\r\n              Need Help?\r\n            </a>\r\n          </div>\r\n        </div>\r\n      </form>\r\n      <div class=\"login100-more\" style=\"background-image: url('assets/images/pages/bg-03.png');\">\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>","import { Injectable } from '@angular/core';\r\nimport { CanActivate,CanLoad,Router } from '@angular/router';\r\nimport { AuthService } from './authentication.service';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n  })\r\n  export class RandomGuard implements CanActivate,CanLoad {\r\n  \r\n    constructor(private authService: AuthService, private router: Router) { }\r\n  \r\n    canActivate() {\r\n      if (this.authService.isLoggedIn()) {\r\n        this.router.navigate(['/calendar']);\r\n      }\r\n      return !this.authService.isLoggedIn();\r\n    }\r\n\r\n    canLoad() {\r\n      if (this.authService.isLoggedIn()) {\r\n        this.router.navigate(['/calendar']);\r\n      }\r\n      return !this.authService.isLoggedIn();\r\n    }\r\n  }","import { Component, OnInit } from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { AuthService } from '../authentication.service';\r\nimport { AuthenticationClass, RootObject } from '../../classes/auth';\r\n//import { SessionStorageService } from 'ngx-webstorage';\r\n@Component({\r\n  selector: 'app-signin',\r\n  templateUrl: './signin.component.html',\r\n  styleUrls: ['./signin.component.scss']\r\n})\r\nexport class SigninComponent implements OnInit {\r\n  loginForm: FormGroup;\r\n  submitted = false;\r\n  returnUrl: string;\r\n  public sessiondata;\r\n  hide = true;\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private route: ActivatedRoute,\r\n    public authService: AuthService,\r\n    private router: Router\r\n  ) {}\r\n  ngOnInit() {\r\n    this.loginForm = this.formBuilder.group({\r\n      email: [''],\r\n      password: ['']\r\n    });\r\n    // get return url from route parameters or default to '/'\r\n    this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\r\n  }\r\n  get f() {\r\n    return this.loginForm.controls;\r\n  }\r\n  onSubmit() {\r\n    this.submitted = true;\r\n    if (this.loginForm.invalid) {\r\n      return;\r\n    } else {\r\n      this.router.navigate(['/calendar']);\r\n      // this.authService.getAuthentication(this.loginForm.value.email, this.loginForm.value.password)\r\n      //   .subscribe(success => {\r\n      //     if (success) {\r\n      //       this.sessiondata = sessionStorage.getItem(\"role\");\r\n      //       //console.log(sessionStorage.getItem(\"role\"));\r\n      //       this.router.navigate(['/calendar']);\r\n      //     }\r\n      //   });\r\n    }\r\n  }\r\n}\r\n","<div class=\"limiter\">\r\n  <div class=\"container-login100\">\r\n    <div class=\"wrap-login100\">\r\n      <form class=\"login100-form validate-form\" [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\">\r\n        <span class=\"login100-form-title pb-5\">\r\n          Login\r\n        </span>\r\n        <div class=\"row\">\r\n          <div class=\"col-xl-12 col-lg-12 col-md-12 col-sm-12 mb-2\">\r\n            <mat-form-field class=\"example-full-width\" appearance=\"outline\">\r\n              <mat-label>Email</mat-label>\r\n              <input matInput formControlName=\"email\" />\r\n              <mat-icon matSuffix>face</mat-icon>\r\n            </mat-form-field>\r\n          </div>\r\n        </div>\r\n        <div class=\"row\">\r\n          <div class=\"col-xl-12col-lg-12 col-md-12 col-sm-12 mb-2\">\r\n            <mat-form-field class=\"example-full-width\" appearance=\"outline\">\r\n              <mat-label>Password</mat-label>\r\n              <input matInput type=\"password\" formControlName=\"password\">\r\n              <mat-icon matSuffix>vpn_key</mat-icon>\r\n            </mat-form-field>\r\n          </div>\r\n        </div>\r\n        <!-- <div class=\"flex-sb-m w-full p-t-15 p-b-20\">\r\n          <div class=\"form-check\">\r\n            <label class=\"form-check-label\">\r\n              <input class=\"form-check-input\" type=\"checkbox\" value=\"\"> Remember me\r\n              <span class=\"form-check-sign\">\r\n                <span class=\"check\"></span>\r\n              </span>\r\n            </label>\r\n          </div>\r\n          <div>\r\n            <a class=\"txt1\" routerLink=\"/authentication/forgot-password\">Forgot Password?</a>\r\n          </div>\r\n        </div> -->\r\n        <div class=\"container-login100-form-btn\">\r\n          <button mat-flat-button color=\"primary\" class=\"login100-form-btn\" type=\"submit\">\r\n            Login\r\n          </button>\r\n        </div>\r\n        <div class=\"text-center p-t-30 p-b-20\">\r\n          <span class=\"txt3\">\r\n            <a routerLink=\"/authentication/signup\">\r\n              sign up\r\n            </a> \r\n          </span>\r\n        </div>\r\n        <!-- <div class=\"login100-form-social flex-c-m\">\r\n          <a href=\"#\" class=\"login100-form-social-item flex-c-m bg1 m-r-5\">\r\n            <i class=\"fab fa-facebook-f\"></i>\r\n          </a>\r\n          <a href=\"#\" class=\"login100-form-social-item flex-c-m bg2 m-r-5\">\r\n            <i class=\"fab fa-twitter\"></i>\r\n          </a>\r\n        </div> -->\r\n      </form>\r\n    </div>\r\n  </div>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { AuthService } from '../authentication.service';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\n@Component({\r\n  selector: 'app-signup',\r\n  templateUrl: './signup.component.html',\r\n  styleUrls: ['./signup.component.scss']\r\n})\r\nexport class SignupComponent implements OnInit {\r\n  loginForm: FormGroup;\r\n  submitted = false;\r\n  returnUrl: string;\r\n  hide = true;\r\n  public sessiondata;\r\n  chide = true;\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private route: ActivatedRoute,\r\n    private http: HttpClient,\r\n    public authService: AuthService,\r\n    private router: Router\r\n  ) { }\r\n  ngOnInit() {\r\n    this.loginForm = this.formBuilder.group({\r\n      firstname: ['', Validators.required],\r\n      lastname: ['', Validators.required],\r\n      email: [\r\n        '',\r\n        [Validators.required, Validators.email, Validators.minLength(5)]\r\n      ],\r\n      password: ['', Validators.required],\r\n      cpassword: ['', Validators.required]\r\n    });\r\n    // get return url from route parameters or default to '/'\r\n    this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\r\n  }\r\n  get f() {\r\n    return this.loginForm.controls;\r\n  }\r\n  // onSubmit() {\r\n  //   this.submitted = true;\r\n  //   if (this.loginForm.invalid) {\r\n  //     return;\r\n  //   } else {\r\n  //     console.log(this.loginForm);\r\n  // if(this.loginForm.value.password==this.loginForm.value.cpassword){\r\n  //   this.authService.registerUser(this.loginForm.value.firstname,this.loginForm.value.lastname,this.loginForm.value.email, this.loginForm.value.password)\r\n  //   .subscribe(success => {\r\n  //     if (success) {\r\n  //       this.sessiondata = sessionStorage.getItem(\"role\");\r\n  //       //console.log(sessionStorage.getItem(\"role\"));\r\n  //       this.router.navigate(['/calendar']);\r\n  //     }\r\n  //   });\r\n  // }\r\n  // else{\r\n\r\n  // }\r\n  //   }\r\n  // }\r\n  onSubmit() {\r\n    this.submitted = true;\r\n    // stop here if form is invalid\r\n    if (this.loginForm.invalid) {\r\n      return;\r\n    }\r\n    // Initialize Params Object\r\n    let Params = new HttpParams();\r\n    // Begin assigning parameters\r\n    Params = Params.append('firstname', this.loginForm.value.firstname);\r\n    Params = Params.append('lastname', this.loginForm.value.lastname);\r\n    Params = Params.append('email', this.loginForm.value.email);\r\n    Params = Params.append('password', this.loginForm.value.password);\r\n    return this.http.post('http://localhost:8000/api/signup'\r\n      , {\r\n        params: { params: Params }\r\n      }).subscribe((res: Response) => {\r\n        alert(res);\r\n        //this.registerForm.reset();\r\n      })\r\n\r\n\r\n  }\r\n}\r\n","<div class=\"limiter\">\r\n  <div class=\"container-login100\">\r\n    <div class=\"wrap-login100\">\r\n      <form class=\"login100-form validate-form\" [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\">\r\n        <span class=\"login100-form-title p-b-30\">\r\n          Register\r\n        </span>\r\n        <mat-form-field class=\"example-full-width\" appearance=\"outline\">\r\n          <mat-label>First Name</mat-label>\r\n          <input matInput formControlName=\"firstname\" required>\r\n          <mat-icon matSuffix>face</mat-icon>\r\n          <mat-error *ngIf=\"loginForm.get('firstname').hasError('required')\">\r\n            First Name is required\r\n          </mat-error>\r\n        </mat-form-field>\r\n        <mat-form-field class=\"example-full-width\" appearance=\"outline\">\r\n          <mat-label>Last Name</mat-label>\r\n          <input matInput formControlName=\"lastname\" required>\r\n          <mat-icon matSuffix>face</mat-icon>\r\n          <mat-error *ngIf=\"loginForm.get('lastname').hasError('required')\">\r\n            Last Name is required\r\n          </mat-error>\r\n        </mat-form-field>\r\n        <mat-form-field class=\"example-full-width\" appearance=\"outline\">\r\n          <mat-label>Email</mat-label>\r\n          <input matInput formControlName=\"email\" required>\r\n          <mat-icon matSuffix>mail</mat-icon>\r\n          <mat-error *ngIf=\"loginForm.get('email').hasError('required') || loginForm.get('email').touched\">\r\n            Please enter a valid email address\r\n          </mat-error>\r\n        </mat-form-field>\r\n        <mat-form-field class=\"example-full-width\" appearance=\"outline\">\r\n          <mat-label>Password</mat-label>\r\n          <input matInput formControlName=\"password\" [type]=\"hide ? 'password' : 'text'\" required>\r\n          <mat-icon matSuffix (click)=\"hide = !hide\">\r\n            {{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\r\n          <mat-error *ngIf=\"loginForm.get('password').hasError('required')\">\r\n            Password is required\r\n          </mat-error>\r\n        </mat-form-field>\r\n        <mat-form-field class=\"example-full-width\" appearance=\"outline\">\r\n          <mat-label>Confirm Password</mat-label>\r\n          <input matInput formControlName=\"cpassword\" [type]=\"chide ? 'password' : 'text'\" required>\r\n          <mat-icon matSuffix (click)=\"chide = !chide\">\r\n            {{chide ? 'visibility_off' : 'visibility'}}</mat-icon>\r\n          <mat-error *ngIf=\"loginForm.get('cpassword').hasError('required')\">\r\n            Confirm Password is required\r\n          </mat-error>\r\n        </mat-form-field>\r\n        <div class=\"flex-sb-m w-full p-t-15 p-b-20\">\r\n          <div>\r\n            <span>Already Registered? <a routerLink=\"/authentication/signin\">\r\n                Login\r\n              </a></span>\r\n          </div>\r\n        </div>\r\n        <div class=\"container-login100-form-btn\">\r\n          <button mat-flat-button color=\"primary\" class=\"login100-form-btn\" type=\"submit\">\r\n            Register\r\n          </button>\r\n        </div>\r\n        <!-- <div class=\"text-center p-t-30 p-b-20\">\r\n          <span class=\"txt2\">\r\n            or sign up using\r\n          </span>\r\n        </div>\r\n        <div class=\"login100-form-social flex-c-m\">\r\n          <a href=\"#\" class=\"login100-form-social-item flex-c-m bg1 m-r-5\">\r\n            <i class=\"fab fa-facebook-f\"></i>\r\n          </a>\r\n          <a href=\"#\" class=\"login100-form-social-item flex-c-m bg2 m-r-5\">\r\n            <i class=\"fab fa-twitter\"></i>\r\n          </a>\r\n        </div> -->\r\n      </form>\r\n      <div class=\"login100-more\" style=\"background-image: url('assets/images/pages/bg-02.png');\">\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>","import { Injectable } from '@angular/core';\r\nimport { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor, HttpErrorResponse } from '@angular/common/http';\r\nimport { AuthService } from './authentication.service';\r\nimport { Observable, throwError, BehaviorSubject } from 'rxjs';\r\nimport { catchError, filter, take, switchMap } from 'rxjs/operators';\r\n\r\n@Injectable()\r\nexport class TokenInterceptor implements HttpInterceptor {\r\n\r\n  private isRefreshing = false;\r\n  private refreshTokenSubject: BehaviorSubject<any> = new BehaviorSubject<any>(null);\r\n\r\n  constructor(public authService: AuthService) { }\r\n\r\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n\r\n    if (this.authService.getJwtToken()) {\r\n      request = this.addToken(request, this.authService.getJwtToken());\r\n    }\r\n\r\n    return next.handle(request).pipe(catchError(error => {\r\n      if (error instanceof HttpErrorResponse && error.status === 401) {\r\n        console.log(\"errorrrr\");\r\n        return this.handle401Error(request, next);\r\n      } else {\r\n        return throwError(error);\r\n      }\r\n    }));\r\n  }\r\n\r\n  private addToken(request: HttpRequest<any>, token: string) {\r\n    return request.clone({\r\n      setHeaders: {\r\n        'Authorization': `Bearer ${token}`\r\n      }\r\n    });\r\n  }\r\n\r\n  private handle401Error(request: HttpRequest<any>, next: HttpHandler) {\r\n    if (!this.isRefreshing) {\r\n      this.isRefreshing = true;\r\n      this.refreshTokenSubject.next(null);\r\n\r\n      return this.authService.refreshToken().pipe(\r\n        switchMap((token: any) => {\r\n          this.isRefreshing = false;\r\n          this.refreshTokenSubject.next(token.jwt);\r\n          return next.handle(this.addToken(request, token.jwt));\r\n        }));\r\n\r\n    } else {\r\n      return this.refreshTokenSubject.pipe(\r\n        filter(token => token != null),\r\n        take(1),\r\n        switchMap(jwt => {\r\n          return next.handle(this.addToken(request, jwt));\r\n        }));\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///"}