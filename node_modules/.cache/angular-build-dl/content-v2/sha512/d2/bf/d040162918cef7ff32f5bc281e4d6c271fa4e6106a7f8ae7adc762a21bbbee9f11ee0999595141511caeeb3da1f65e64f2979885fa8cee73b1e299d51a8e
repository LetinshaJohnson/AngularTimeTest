{"version":3,"sources":["webpack:///src/app/authentication/auth.guard.ts","webpack:///src/app/authentication/authentication-routing.module.ts","webpack:///src/app/authentication/authentication.module.ts","webpack:///src/app/authentication/authentication.service.ts","webpack:///src/app/authentication/forgot-password/forgot-password.component.ts","webpack:///src/app/authentication/forgot-password/forgot-password.component.html","webpack:///src/app/authentication/locked/locked.component.ts","webpack:///src/app/authentication/locked/locked.component.html","webpack:///src/app/authentication/page404/page404.component.ts","webpack:///src/app/authentication/page404/page404.component.html","webpack:///src/app/authentication/page500/page500.component.ts","webpack:///src/app/authentication/page500/page500.component.html","webpack:///src/app/authentication/random.guard.ts","webpack:///src/app/authentication/signin/signin.component.ts","webpack:///src/app/authentication/signin/signin.component.html","webpack:///src/app/authentication/signup/signup.component.ts","webpack:///src/app/authentication/signup/signup.component.html","webpack:///src/app/authentication/token.interceptor.ts"],"names":["AuthGuard","authService","router","isLoggedIn","navigate","providedIn","routes","path","redirectTo","pathMatch","component","AuthenticationRoutingModule","forChild","imports","exports","AuthenticationModule","provide","useClass","multi","declarations","providers","AuthService","httpClient","snackBar","JWT_TOKEN","REFRESH_TOKEN","API_URL","apiBaseURL","email","password","authData","user_email","user_password","post","pipe","tokens","Response","showNotification","Result","error","firstname","lastname","console","log","registerData","user_first_name","user_last_name","user_status","sessionStorage","setItem","toString","doLoginUser","colorName","text","placementFrom","placementAlign","open","duration","verticalPosition","horizontalPosition","panelClass","getRefreshToken","doLogoutUser","action","otp","emailCheck","request","authorization","Authorization","getItem","requestData","newUname","login_id","login_email","changeUsername","username","newPswd","changePassword","role_id","userOne","getJwtToken","storeJwtToken","token","localStorage","loggedUser","storeTokens","removeTokens","jwt","user_id","refreshToken","removeItem","clear","ForgotPasswordComponent","formBuilder","route","submitted","loginForm","group","required","returnUrl","snapshot","queryParams","controls","invalid","onSubmit","selector","templateUrl","styleUrls","LockedComponent","hide","Page404Component","Page500Component","RandomGuard","SigninComponent","SignupComponent","http","chide","minLength","cpassword","Params","append","value","params","subscribe","res","alert","TokenInterceptor","isRefreshing","refreshTokenSubject","next","addToken","handle","status","handle401Error","clone","setHeaders"],"mappings":"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","file":"authentication-authentication-module-es5.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { CanActivate,Router } from '@angular/router';\r\nimport { AuthService } from './authentication.service';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n  })\r\n  export class AuthGuard implements CanActivate {\r\n  \r\n    constructor(private authService: AuthService, private router: Router) { }\r\n  \r\n    canActivate() {\r\n      if (this.authService.isLoggedIn()) {\r\n        this.router.navigate(['/calendar']);\r\n      }\r\n      return !this.authService.isLoggedIn();\r\n    }\r\n  }","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { SigninComponent } from './signin/signin.component';\r\nimport { SignupComponent } from './signup/signup.component';\r\nimport { ForgotPasswordComponent } from './forgot-password/forgot-password.component';\r\nimport { LockedComponent } from './locked/locked.component';\r\nimport { Page404Component } from './page404/page404.component';\r\nimport { Page500Component } from './page500/page500.component';\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    redirectTo: 'signin',\r\n    pathMatch: 'full'\r\n  },\r\n  {\r\n    path: 'signin',\r\n    component: SigninComponent\r\n  },\r\n  {\r\n    path: 'signup',\r\n    component: SignupComponent\r\n  },\r\n  {\r\n    path: 'forgot-password',\r\n    component: ForgotPasswordComponent\r\n  },\r\n  {\r\n    path: 'locked',\r\n    component: LockedComponent\r\n  },\r\n  {\r\n    path: 'page404',\r\n    component: Page404Component\r\n  },\r\n  {\r\n    path: 'page500',\r\n    component: Page500Component\r\n  }\r\n];\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AuthenticationRoutingModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { AuthenticationRoutingModule } from './authentication-routing.module';\r\nimport { Page500Component } from './page500/page500.component';\r\nimport { Page404Component } from './page404/page404.component';\r\nimport { SigninComponent } from './signin/signin.component';\r\nimport { SignupComponent } from './signup/signup.component';\r\nimport { LockedComponent } from './locked/locked.component';\r\nimport { ForgotPasswordComponent } from './forgot-password/forgot-password.component';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { AuthGuard } from '../authentication/auth.guard';\r\nimport { RandomGuard } from '../authentication/random.guard';\r\nimport { AuthService } from '../authentication/authentication.service';\r\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\r\nimport { TokenInterceptor } from '../authentication/token.interceptor';\r\n@NgModule({\r\n  declarations: [\r\n    Page500Component,\r\n    Page404Component,\r\n    SigninComponent,\r\n    SignupComponent,\r\n    LockedComponent,\r\n    ForgotPasswordComponent\r\n  ],\r\n  providers:[\r\n    AuthGuard,\r\n    RandomGuard,\r\n    AuthService,\r\n    {\r\n      provide: HTTP_INTERCEPTORS,\r\n      useClass: TokenInterceptor,\r\n      multi:true\r\n    }\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    AuthenticationRoutingModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatIconModule,\r\n    MatButtonModule\r\n  ]\r\n})\r\nexport class AuthenticationModule {}\r\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { AuthData,RegisterUser, RequestData, EmailCheck, changePassword,changeUsername,UserOne } from './auth-data.model';\nimport { catchError, mapTo, tap } from 'rxjs/operators';\nimport { AuthenticationClass, RootObject } from '../classes/auth';\nimport { Token } from '../classes/token';\nimport { Observable, of } from 'rxjs';\nimport { environment } from '../../environments/environment';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n@Injectable({ providedIn: \"root\" })\nexport class AuthService {\n  private readonly JWT_TOKEN = 'JWT_TOKEN';\n  private readonly REFRESH_TOKEN = 'REFRESH_TOKEN';\n  private loggedUser: String;\n  private readonly API_URL = environment.apiBaseURL + 'auth/login';\n  //dialogData: any; authData\n  constructor(private httpClient: HttpClient, private router: Router,\n    private snackBar: MatSnackBar) {\n  }\n\n  /** CRUD METHODS */\n  getAuthentication(email: String, password: String): Observable<Boolean> {\n    try {\n      const authData: AuthData = { user_email: email, user_password: password };\n      return this.httpClient.post<RootObject>(environment.apiBaseURL + 'api/login', authData)\n        .pipe(\n          tap(tokens => {\n            if (tokens.Response == \"Success\") {\n              // sessionStorage.setItem(\"login_pswd\", password.toString());\n              // this.doLoginUser(email, tokens);\n              this.showNotification(\n                'snackbar-success',\n                'Registered Successfully...!!!',\n                'bottom',\n                'center'\n              );\n              return of(true);\n            } else {\n              this.showNotification(\n                'snackbar-danger',\n                tokens.Result,\n                'bottom',\n                'center'\n              );\n              return of(false);\n            }\n            //sessionStorage.setItem(\"login_id\", tokens);\n          }\n          ),\n          mapTo(true),\n          catchError(error => {\n            this.showNotification(\n              'snackbar-danger',\n              'Invalid User',\n              'bottom',\n              'center'\n            );\n            return of(false);\n          }));\n\n    } catch (error) {\n      //console.log(error);\n    }\n\n  }\n  \n  registerUser(firstname:String,lastname:String,email: String, password: String): Observable<Boolean> {\n    console.log(environment.apiBaseURL);\n    try {\n      const registerData: RegisterUser = {user_first_name:firstname,user_last_name:lastname, user_email: email, user_password: password,user_status:\"\" };\n      return this.httpClient.post<RootObject>(environment.apiBaseURL + 'api/signup', registerData)\n        .pipe(\n          tap(tokens => {\n            if (tokens.Response == \"Success\") {\n              sessionStorage.setItem(\"login_pswd\", password.toString());\n              this.doLoginUser(email, tokens);\n            } else {\n              this.showNotification(\n                'snackbar-danger',\n                'Invalid User',\n                'bottom',\n                'center'\n              );\n              return of(false);\n            }\n            //sessionStorage.setItem(\"login_id\", tokens);\n          }\n          ),\n          mapTo(true),\n          catchError(error => {\n            this.showNotification(\n              'snackbar-danger',\n              'Invalid User',\n              'bottom',\n              'center'\n            );\n            return of(false);\n          }));\n\n    } catch (error) {\n      //console.log(error);\n    }\n\n  }\n\n  showNotification(colorName, text, placementFrom, placementAlign) {\n    this.snackBar.open(text, '', {\n      duration: 2000,\n      verticalPosition: placementFrom,\n      horizontalPosition: placementAlign,\n      panelClass: colorName,\n    });\n  }\n\n  logout() {\n    return this.httpClient.post<any>(environment.apiBaseURL + 'auth/logout', {\n      'refreshToken': this.getRefreshToken()\n    }).pipe(\n      tap(() => this.doLogoutUser()),\n      mapTo(true),\n      catchError(error => {\n        //(error.error);\n        return error.error;\n      }));\n  }\n\n  checkOTP(action: String, otp: String): Observable<Boolean> {\n    try {\n      // const authData: AuthData = { login_username: username, login_password: password };\n      // ////console.log(authData);\n      // return this.httpClient.post<RootObject>(environment.apiBaseURL + 'auth/login', authData)\n      //   .pipe(\n      //     tap(tokens => {\n      //       ////console.log(tokens);\n      //       //sessionStorage.setItem(\"login_id\", tokens);\n      //       this.doLoginUser(username, tokens)\n      //     }\n      //     ),\n      //     mapTo(true),\n      //     catchError(error => {\n      //       this.showNotification(\n      //         'snackbar-danger',\n      //         'Invalid User',\n      //         'bottom',\n      //         'center'\n      //       );\n      return of(false);\n      //     }));\n\n    } catch (error) {\n      //console.log(error);\n    }\n\n  }\n\n  // ------------- forgot Password ------------\n\n  Forgotemailpassword(action: String, email: String): Observable<any> {\n    //console.log(action);\n    // const authorization = { Authorization: `${sessionStorage.getItem(\"authorization\")}` };\n    // if (action == \"1\") {\n      const emailCheck: EmailCheck = { email: email, request: \"username\" };\n    //   //console.log(emailCheck);\n    //   return this.httpClient.post<any>(environment.apiBaseURL + 'forgetpassword/passwordchangeotp', emailCheck)\n    // } else if (action == \"2\") {\n    //   const emailCheck: EmailCheck = { login_email: email, request: \"password\" };\n    //   return this.httpClient.post<any>(environment.apiBaseURL + 'forgetpassword/passwordchangeotp', emailCheck)\n    // } else if (action == \"3\") {\n    //   const emailCheck: EmailCheck = { login_email: email, request: \"username\" };\n    //   return this.httpClient.post<any>(environment.apiBaseURL + 'forgetpassword/requestusernamepassword', emailCheck)\n    // } else if (action == \"4\") {\n    //   const emailCheck: EmailCheck = { login_email: email, request: \"username\" };\n    //   return this.httpClient.post<any>(environment.apiBaseURL + 'forgetpassword/requestusernamepassword', emailCheck)\n    // } else {\n    //   //\n    // }\n    return this.httpClient.post<any>(environment.apiBaseURL + 'forgetpassword/passwordchangeotp', emailCheck)\n  }\n\n  // ------------- forgot Password ------------\n\n  // ------------- change Username / Password ------------\n\n  requestusernamepassword(action: string, request: string, email: string) {\n    //console.log(\"hello\");\n    const authorization = { Authorization: `${sessionStorage.getItem(\"authorization\")}` };\n    const requestData: RequestData = { email: email, request: request, authorization: authorization };\n    return this.httpClient.post<any>(environment.apiBaseURL + 'changepassword/requestusernamepassword', requestData)\n  }\n\n  changeusername(action: String, newUname: string,login_id:string,login_email:string) {\n    const authorization = { Authorization: `${sessionStorage.getItem(\"authorization\")}` };\n    if (action == \"1\") {\n      const changeUsername: changeUsername = { login_id: login_id,login_email: login_email, username: newUname, authorization: \"\" };\n      return this.httpClient.post<any>(environment.apiBaseURL + 'forgetpassword/forgetusername', changeUsername)\n    }else if (action == \"request_username\") {\n      const changeUsername: changeUsername = { login_id: login_id,login_email: login_email, username: newUname, authorization: \"\" };\n      console.log(changeUsername);\n      return this.httpClient.post<any>(environment.apiBaseURL + 'changepassword/changeusername', changeUsername)\n    }\n  }\n\n  changepassword(action: String, newPswd: string,login_id:string,login_email:string) {\n    const authorization = { Authorization: `${sessionStorage.getItem(\"authorization\")}` };\n    if (action == \"2\") {\n      const changePassword: changePassword = { login_id: login_id,login_email: login_email, password: newPswd, authorization: \"\" };\n      return this.httpClient.post<any>(environment.apiBaseURL + 'forgetpassword/forgetpassword', changePassword)\n    } else if (action == \"5\" || action == \"request_password\") {\n      const changePassword: changePassword = { login_id: login_id,login_email: login_email, password: newPswd, authorization: authorization };\n      console.log(changePassword);\n      return this.httpClient.post<any>(environment.apiBaseURL + 'changepassword/changepassword', changePassword)\n    }\n  }\n\n  // ------------- // change Username / Password ------------\n\n  // ------------- // Get Users -----------------------------\n\n\n  getRequestUser(role_id:string,login_id:string): any {\n    const authorization = { Authorization: `${sessionStorage.getItem(\"authorization\")}` };\n    const userOne:UserOne={role_id:role_id,login_id:login_id,authorization:authorization}\n    console.log(userOne);\n    return this.httpClient.post<any>(environment.apiBaseURL + 'changepassword/getUserOne',userOne)    \n  }\n  \n  // ------------- // Get Users -----------------------------\n\n  isLoggedIn() {\n    return !!this.getJwtToken();\n  }\n\n  refreshToken() {\n    //alert(\"tokk \" + this.getRefreshToken());\n    return this.httpClient.post<any>(environment.apiBaseURL + 'auth/refresh', {\n      'refreshToken': this.getRefreshToken()\n    }).pipe(tap((tokens: RootObject) => {\n      //console.log(\"refreshed\");\n      this.storeJwtToken(tokens.Result[0].token);\n    }));\n  }\n\n  getJwtToken() {\n    return localStorage.getItem(this.JWT_TOKEN);\n  }\n\n  private doLoginUser(email: String, tokens: RootObject) {\n    this.loggedUser = email;\n    this.storeTokens(tokens);\n  }\n\n  private doLogoutUser() {\n    this.loggedUser = null;\n    this.removeTokens();\n  }\n\n  private getRefreshToken() {\n    return localStorage.getItem(this.REFRESH_TOKEN);\n  }\n\n  private storeJwtToken(jwt: string) {\n    localStorage.setItem(this.JWT_TOKEN, jwt);\n  }\n\n  private storeTokens(tokens: RootObject) {\n    sessionStorage.setItem(\"user_id\", tokens.Result[0].user_id.toString());\n    sessionStorage.setItem(\"tabIndex\", \"1\");\n    sessionStorage.setItem(\"authorization\", tokens.Result[0].token);\n    localStorage.setItem(this.JWT_TOKEN, tokens.Result[0].token);\n    localStorage.setItem(this.REFRESH_TOKEN, tokens.Result[0].refreshToken);\n  }\n\n  private removeTokens() {\n    localStorage.removeItem(this.JWT_TOKEN);\n    localStorage.removeItem(this.REFRESH_TOKEN);\n    sessionStorage.clear();\n    this.router.navigate(['/authentication/signin']);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\n@Component({\r\n  selector: 'app-forgot-password',\r\n  templateUrl: './forgot-password.component.html',\r\n  styleUrls: ['./forgot-password.component.scss']\r\n})\r\nexport class ForgotPasswordComponent implements OnInit {\r\n  loginForm: FormGroup;\r\n  submitted = false;\r\n  returnUrl: string;\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private route: ActivatedRoute,\r\n    private router: Router\r\n  ) {}\r\n  ngOnInit() {\r\n    this.loginForm = this.formBuilder.group({\r\n      username: ['', Validators.required]\r\n    });\r\n    // get return url from route parameters or default to '/'\r\n    this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\r\n  }\r\n  get f() {\r\n    return this.loginForm.controls;\r\n  }\r\n  onSubmit() {\r\n    this.submitted = true;\r\n    // stop here if form is invalid\r\n    if (this.loginForm.invalid) {\r\n      return;\r\n    } else {\r\n      this.router.navigate(['/dashboard/main']);\r\n    }\r\n  }\r\n}\r\n","<div class=\"limiter\">\r\n  <div class=\"container-login100\">\r\n    <div class=\"wrap-login100\">\r\n      <form class=\"login100-form validate-form\" [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\">\r\n        <span class=\"login100-form-title p-b-45\">\r\n          Reset Password\r\n        </span>\r\n        <span class=\"error-subheader2 p-t-20 p-b-15\">\r\n          Enter your registered email address.\r\n        </span>\r\n        <div class=\"form-group mb-5\">\r\n          <mat-form-field class=\"example-full-width\" appearance=\"outline\">\r\n            <mat-label>Username</mat-label>\r\n            <input matInput formControlName=\"username\" required>\r\n            <mat-icon matSuffix>face</mat-icon>\r\n            <mat-error *ngIf=\"loginForm.get('username').hasError('required')\">\r\n              Username is required\r\n            </mat-error>\r\n          </mat-form-field>\r\n        </div>\r\n        <div class=\"container-login100-form-btn\">\r\n          <button mat-flat-button color=\"primary\" class=\"login100-form-btn\" type=\"submit\">\r\n            Reset My Password\r\n          </button>\r\n        </div>\r\n        <div class=\"w-full p-t-25 text-center\">\r\n          <div>\r\n            <a routerLink=\"/authentication/signin\" class=\"txt1\">\r\n              Login?\r\n            </a>\r\n          </div>\r\n        </div>\r\n      </form>\r\n      <div class=\"login100-more\" style=\"background-image: url('assets/images/pages/bg-02.png');\">\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\n@Component({\r\n  selector: 'app-locked',\r\n  templateUrl: './locked.component.html',\r\n  styleUrls: ['./locked.component.scss']\r\n})\r\nexport class LockedComponent implements OnInit {\r\n  loginForm: FormGroup;\r\n  submitted = false;\r\n  returnUrl: string;\r\n  hide = true;\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private route: ActivatedRoute,\r\n    private router: Router\r\n  ) {}\r\n  ngOnInit() {\r\n    this.loginForm = this.formBuilder.group({\r\n      password: ['', Validators.required]\r\n    });\r\n    // get return url from route parameters or default to '/'\r\n    this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\r\n  }\r\n  get f() {\r\n    return this.loginForm.controls;\r\n  }\r\n  onSubmit() {\r\n    this.submitted = true;\r\n    // stop here if form is invalid\r\n    if (this.loginForm.invalid) {\r\n      return;\r\n    } else {\r\n      this.router.navigate(['/dashboard/main']);\r\n    }\r\n  }\r\n}\r\n","<div class=\"limiter\">\r\n  <div class=\"container-login100\">\r\n    <div class=\"wrap-login100\">\r\n      <form class=\"login100-form validate-form\" [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\">\r\n        <div class=\"login100-form-logo\">\r\n          <div class=\"image\">\r\n            <img src=\"assets/images/usrbig.jpg\" alt=\"User\">\r\n          </div>\r\n        </div>\r\n        <span class=\"login100-form-title p-b-34 p-t-27\">\r\n          Emily Smith\r\n        </span>\r\n        <div class=\"text-center\">\r\n          <p class=\"txt1 p-b-20\">\r\n            Locked\r\n          </p>\r\n        </div>\r\n        <div class=\"form-group mb-3\">\r\n          <mat-form-field class=\"example-full-width\" appearance=\"outline\">\r\n            <mat-label>Password</mat-label>\r\n            <input matInput formControlName=\"password\" [type]=\"hide ? 'password' : 'text'\" required>\r\n            <mat-icon matSuffix (click)=\"hide = !hide\">\r\n              {{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\r\n            <mat-error *ngIf=\"loginForm.get('password').hasError('required')\">\r\n              Password is required\r\n            </mat-error>\r\n          </mat-form-field>\r\n        </div>\r\n        <div class=\"container-login100-form-btn p-t-30\">\r\n          <button mat-flat-button color=\"primary\" class=\"login100-form-btn\">\r\n            Login\r\n          </button>\r\n        </div>\r\n        <div class=\"w-full p-t-15 p-b-15 text-center\">\r\n          <div>\r\n            <a href=\"#\" class=\"txt1\">\r\n              Need Help?\r\n            </a>\r\n          </div>\r\n        </div>\r\n      </form>\r\n      <div class=\"login100-more\" style=\"background-image: url('assets/images/pages/bg-01.png');\">\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\n@Component({\r\n  selector: 'app-page404',\r\n  templateUrl: './page404.component.html',\r\n  styleUrls: ['./page404.component.scss'],\r\n})\r\nexport class Page404Component implements OnInit {\r\n  constructor() {}\r\n  ngOnInit() {}\r\n}\r\n","<div class=\"limiter\">\r\n  <div class=\"container-login100\">\r\n    <div class=\"wrap-login100\">\r\n      <form class=\"login100-form\">\r\n        <span class=\"error-header p-b-45\">\r\n          404\r\n        </span>\r\n        <span class=\"error-subheader p-b-5\">\r\n          Looks Like You're Lost\r\n        </span>\r\n        <span class=\"error-subheader2 p-b-5\">\r\n          The Page You Are Looking For Not Available!\r\n        </span>\r\n        <div class=\"container-login100-form-btn p-t-30\t\">\r\n          <button mat-flat-button color=\"primary\" class=\"login100-form-btn\">\r\n            Go To Home Page\r\n          </button>\r\n        </div>\r\n        <div class=\"w-full p-t-15 p-b-15 text-center\">\r\n          <div>\r\n            <a href=\"#\" class=\"txt1\">\r\n              Need Help?\r\n            </a>\r\n          </div>\r\n        </div>\r\n      </form>\r\n      <div class=\"login100-more\" style=\"background-image: url('assets/images/pages/bg-03.png');\">\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\n@Component({\r\n  selector: 'app-page500',\r\n  templateUrl: './page500.component.html',\r\n  styleUrls: ['./page500.component.scss'],\r\n})\r\nexport class Page500Component implements OnInit {\r\n  constructor() {}\r\n  ngOnInit() {}\r\n}\r\n","<div class=\"limiter\">\r\n  <div class=\"container-login100\">\r\n    <div class=\"wrap-login100\">\r\n      <form class=\"login100-form\">\r\n        <span class=\"error-header p-b-45\">\r\n          500\r\n        </span>\r\n        <span class=\"error-subheader2 p-b-5\">\r\n          Oops, Something went wrong. Please try after some times.\r\n        </span>\r\n        <div class=\"container-login100-form-btn p-t-30\t\">\r\n          <button mat-flat-button color=\"primary\" class=\"login100-form-btn\">\r\n            Go To Home Page\r\n          </button>\r\n        </div>\r\n        <div class=\"w-full p-t-15 p-b-15 text-center\">\r\n          <div>\r\n            <a href=\"#\" class=\"txt1\">\r\n              Need Help?\r\n            </a>\r\n          </div>\r\n        </div>\r\n      </form>\r\n      <div class=\"login100-more\" style=\"background-image: url('assets/images/pages/bg-03.png');\">\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>","import { Injectable } from '@angular/core';\r\nimport { CanActivate,CanLoad,Router } from '@angular/router';\r\nimport { AuthService } from './authentication.service';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n  })\r\n  export class RandomGuard implements CanActivate,CanLoad {\r\n  \r\n    constructor(private authService: AuthService, private router: Router) { }\r\n  \r\n    canActivate() {\r\n      if (this.authService.isLoggedIn()) {\r\n        this.router.navigate(['/calendar']);\r\n      }\r\n      return !this.authService.isLoggedIn();\r\n    }\r\n\r\n    canLoad() {\r\n      if (this.authService.isLoggedIn()) {\r\n        this.router.navigate(['/calendar']);\r\n      }\r\n      return !this.authService.isLoggedIn();\r\n    }\r\n  }","import { Component, OnInit } from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { AuthService } from '../authentication.service';\r\nimport { AuthenticationClass, RootObject } from '../../classes/auth';\r\n//import { SessionStorageService } from 'ngx-webstorage';\r\n@Component({\r\n  selector: 'app-signin',\r\n  templateUrl: './signin.component.html',\r\n  styleUrls: ['./signin.component.scss']\r\n})\r\nexport class SigninComponent implements OnInit {\r\n  loginForm: FormGroup;\r\n  submitted = false;\r\n  returnUrl: string;\r\n  public sessiondata;\r\n  hide = true;\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private route: ActivatedRoute,\r\n    public authService: AuthService,\r\n    private router: Router\r\n  ) {}\r\n  ngOnInit() {\r\n    this.loginForm = this.formBuilder.group({\r\n      email: [''],\r\n      password: ['']\r\n    });\r\n    // get return url from route parameters or default to '/'\r\n    this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\r\n  }\r\n  get f() {\r\n    return this.loginForm.controls;\r\n  }\r\n  onSubmit() {\r\n    this.submitted = true;\r\n    if (this.loginForm.invalid) {\r\n      return;\r\n    } else {\r\n      this.router.navigate(['/calendar']);\r\n      // this.authService.getAuthentication(this.loginForm.value.email, this.loginForm.value.password)\r\n      //   .subscribe(success => {\r\n      //     if (success) {\r\n      //       this.sessiondata = sessionStorage.getItem(\"role\");\r\n      //       //console.log(sessionStorage.getItem(\"role\"));\r\n      //       this.router.navigate(['/calendar']);\r\n      //     }\r\n      //   });\r\n    }\r\n  }\r\n}\r\n","<div class=\"limiter\">\r\n  <div class=\"container-login100\">\r\n    <div class=\"wrap-login100\">\r\n      <form class=\"login100-form validate-form\" [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\">\r\n        <span class=\"login100-form-title pb-5\">\r\n          Login\r\n        </span>\r\n        <div class=\"row\">\r\n          <div class=\"col-xl-12 col-lg-12 col-md-12 col-sm-12 mb-2\">\r\n            <mat-form-field class=\"example-full-width\" appearance=\"outline\">\r\n              <mat-label>Email</mat-label>\r\n              <input matInput formControlName=\"email\" />\r\n              <mat-icon matSuffix>face</mat-icon>\r\n            </mat-form-field>\r\n          </div>\r\n        </div>\r\n        <div class=\"row\">\r\n          <div class=\"col-xl-12col-lg-12 col-md-12 col-sm-12 mb-2\">\r\n            <mat-form-field class=\"example-full-width\" appearance=\"outline\">\r\n              <mat-label>Password</mat-label>\r\n              <input matInput type=\"password\" formControlName=\"password\">\r\n              <mat-icon matSuffix>vpn_key</mat-icon>\r\n            </mat-form-field>\r\n          </div>\r\n        </div>\r\n        <!-- <div class=\"flex-sb-m w-full p-t-15 p-b-20\">\r\n          <div class=\"form-check\">\r\n            <label class=\"form-check-label\">\r\n              <input class=\"form-check-input\" type=\"checkbox\" value=\"\"> Remember me\r\n              <span class=\"form-check-sign\">\r\n                <span class=\"check\"></span>\r\n              </span>\r\n            </label>\r\n          </div>\r\n          <div>\r\n            <a class=\"txt1\" routerLink=\"/authentication/forgot-password\">Forgot Password?</a>\r\n          </div>\r\n        </div> -->\r\n        <div class=\"container-login100-form-btn\">\r\n          <button mat-flat-button color=\"primary\" class=\"login100-form-btn\" type=\"submit\">\r\n            Login\r\n          </button>\r\n        </div>\r\n        <div class=\"text-center p-t-30 p-b-20\">\r\n          <span class=\"txt3\">\r\n            <a routerLink=\"/authentication/signup\">\r\n              sign up\r\n            </a> \r\n          </span>\r\n        </div>\r\n        <!-- <div class=\"login100-form-social flex-c-m\">\r\n          <a href=\"#\" class=\"login100-form-social-item flex-c-m bg1 m-r-5\">\r\n            <i class=\"fab fa-facebook-f\"></i>\r\n          </a>\r\n          <a href=\"#\" class=\"login100-form-social-item flex-c-m bg2 m-r-5\">\r\n            <i class=\"fab fa-twitter\"></i>\r\n          </a>\r\n        </div> -->\r\n      </form>\r\n    </div>\r\n  </div>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { AuthService } from '../authentication.service';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\n@Component({\r\n  selector: 'app-signup',\r\n  templateUrl: './signup.component.html',\r\n  styleUrls: ['./signup.component.scss']\r\n})\r\nexport class SignupComponent implements OnInit {\r\n  loginForm: FormGroup;\r\n  submitted = false;\r\n  returnUrl: string;\r\n  hide = true;\r\n  public sessiondata;\r\n  chide = true;\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private route: ActivatedRoute,\r\n    private http: HttpClient,\r\n    public authService: AuthService,\r\n    private router: Router\r\n  ) { }\r\n  ngOnInit() {\r\n    this.loginForm = this.formBuilder.group({\r\n      firstname: ['', Validators.required],\r\n      lastname: ['', Validators.required],\r\n      email: [\r\n        '',\r\n        [Validators.required, Validators.email, Validators.minLength(5)]\r\n      ],\r\n      password: ['', Validators.required],\r\n      cpassword: ['', Validators.required]\r\n    });\r\n    // get return url from route parameters or default to '/'\r\n    this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\r\n  }\r\n  get f() {\r\n    return this.loginForm.controls;\r\n  }\r\n  // onSubmit() {\r\n  //   this.submitted = true;\r\n  //   if (this.loginForm.invalid) {\r\n  //     return;\r\n  //   } else {\r\n  //     console.log(this.loginForm);\r\n  // if(this.loginForm.value.password==this.loginForm.value.cpassword){\r\n  //   this.authService.registerUser(this.loginForm.value.firstname,this.loginForm.value.lastname,this.loginForm.value.email, this.loginForm.value.password)\r\n  //   .subscribe(success => {\r\n  //     if (success) {\r\n  //       this.sessiondata = sessionStorage.getItem(\"role\");\r\n  //       //console.log(sessionStorage.getItem(\"role\"));\r\n  //       this.router.navigate(['/calendar']);\r\n  //     }\r\n  //   });\r\n  // }\r\n  // else{\r\n\r\n  // }\r\n  //   }\r\n  // }\r\n  onSubmit() {\r\n    this.submitted = true;\r\n    // stop here if form is invalid\r\n    if (this.loginForm.invalid) {\r\n      return;\r\n    }\r\n    // Initialize Params Object\r\n    let Params = new HttpParams();\r\n    // Begin assigning parameters\r\n    Params = Params.append('firstname', this.loginForm.value.firstname);\r\n    Params = Params.append('lastname', this.loginForm.value.lastname);\r\n    Params = Params.append('email', this.loginForm.value.email);\r\n    Params = Params.append('password', this.loginForm.value.password);\r\n    return this.http.post('http://localhost:8000/api/signup'\r\n      , {\r\n        params: { params: Params }\r\n      }).subscribe((res: Response) => {\r\n        alert(res);\r\n        //this.registerForm.reset();\r\n      })\r\n\r\n\r\n  }\r\n}\r\n","<div class=\"limiter\">\r\n  <div class=\"container-login100\">\r\n    <div class=\"wrap-login100\">\r\n      <form class=\"login100-form validate-form\" [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\">\r\n        <span class=\"login100-form-title p-b-30\">\r\n          Register\r\n        </span>\r\n        <mat-form-field class=\"example-full-width\" appearance=\"outline\">\r\n          <mat-label>First Name</mat-label>\r\n          <input matInput formControlName=\"firstname\" required>\r\n          <mat-icon matSuffix>face</mat-icon>\r\n          <mat-error *ngIf=\"loginForm.get('firstname').hasError('required')\">\r\n            First Name is required\r\n          </mat-error>\r\n        </mat-form-field>\r\n        <mat-form-field class=\"example-full-width\" appearance=\"outline\">\r\n          <mat-label>Last Name</mat-label>\r\n          <input matInput formControlName=\"lastname\" required>\r\n          <mat-icon matSuffix>face</mat-icon>\r\n          <mat-error *ngIf=\"loginForm.get('lastname').hasError('required')\">\r\n            Last Name is required\r\n          </mat-error>\r\n        </mat-form-field>\r\n        <mat-form-field class=\"example-full-width\" appearance=\"outline\">\r\n          <mat-label>Email</mat-label>\r\n          <input matInput formControlName=\"email\" required>\r\n          <mat-icon matSuffix>mail</mat-icon>\r\n          <mat-error *ngIf=\"loginForm.get('email').hasError('required') || loginForm.get('email').touched\">\r\n            Please enter a valid email address\r\n          </mat-error>\r\n        </mat-form-field>\r\n        <mat-form-field class=\"example-full-width\" appearance=\"outline\">\r\n          <mat-label>Password</mat-label>\r\n          <input matInput formControlName=\"password\" [type]=\"hide ? 'password' : 'text'\" required>\r\n          <mat-icon matSuffix (click)=\"hide = !hide\">\r\n            {{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\r\n          <mat-error *ngIf=\"loginForm.get('password').hasError('required')\">\r\n            Password is required\r\n          </mat-error>\r\n        </mat-form-field>\r\n        <mat-form-field class=\"example-full-width\" appearance=\"outline\">\r\n          <mat-label>Confirm Password</mat-label>\r\n          <input matInput formControlName=\"cpassword\" [type]=\"chide ? 'password' : 'text'\" required>\r\n          <mat-icon matSuffix (click)=\"chide = !chide\">\r\n            {{chide ? 'visibility_off' : 'visibility'}}</mat-icon>\r\n          <mat-error *ngIf=\"loginForm.get('cpassword').hasError('required')\">\r\n            Confirm Password is required\r\n          </mat-error>\r\n        </mat-form-field>\r\n        <div class=\"flex-sb-m w-full p-t-15 p-b-20\">\r\n          <div>\r\n            <span>Already Registered? <a routerLink=\"/authentication/signin\">\r\n                Login\r\n              </a></span>\r\n          </div>\r\n        </div>\r\n        <div class=\"container-login100-form-btn\">\r\n          <button mat-flat-button color=\"primary\" class=\"login100-form-btn\" type=\"submit\">\r\n            Register\r\n          </button>\r\n        </div>\r\n        <!-- <div class=\"text-center p-t-30 p-b-20\">\r\n          <span class=\"txt2\">\r\n            or sign up using\r\n          </span>\r\n        </div>\r\n        <div class=\"login100-form-social flex-c-m\">\r\n          <a href=\"#\" class=\"login100-form-social-item flex-c-m bg1 m-r-5\">\r\n            <i class=\"fab fa-facebook-f\"></i>\r\n          </a>\r\n          <a href=\"#\" class=\"login100-form-social-item flex-c-m bg2 m-r-5\">\r\n            <i class=\"fab fa-twitter\"></i>\r\n          </a>\r\n        </div> -->\r\n      </form>\r\n      <div class=\"login100-more\" style=\"background-image: url('assets/images/pages/bg-02.png');\">\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>","import { Injectable } from '@angular/core';\r\nimport { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor, HttpErrorResponse } from '@angular/common/http';\r\nimport { AuthService } from './authentication.service';\r\nimport { Observable, throwError, BehaviorSubject } from 'rxjs';\r\nimport { catchError, filter, take, switchMap } from 'rxjs/operators';\r\n\r\n@Injectable()\r\nexport class TokenInterceptor implements HttpInterceptor {\r\n\r\n  private isRefreshing = false;\r\n  private refreshTokenSubject: BehaviorSubject<any> = new BehaviorSubject<any>(null);\r\n\r\n  constructor(public authService: AuthService) { }\r\n\r\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n\r\n    if (this.authService.getJwtToken()) {\r\n      request = this.addToken(request, this.authService.getJwtToken());\r\n    }\r\n\r\n    return next.handle(request).pipe(catchError(error => {\r\n      if (error instanceof HttpErrorResponse && error.status === 401) {\r\n        console.log(\"errorrrr\");\r\n        return this.handle401Error(request, next);\r\n      } else {\r\n        return throwError(error);\r\n      }\r\n    }));\r\n  }\r\n\r\n  private addToken(request: HttpRequest<any>, token: string) {\r\n    return request.clone({\r\n      setHeaders: {\r\n        'Authorization': `Bearer ${token}`\r\n      }\r\n    });\r\n  }\r\n\r\n  private handle401Error(request: HttpRequest<any>, next: HttpHandler) {\r\n    if (!this.isRefreshing) {\r\n      this.isRefreshing = true;\r\n      this.refreshTokenSubject.next(null);\r\n\r\n      return this.authService.refreshToken().pipe(\r\n        switchMap((token: any) => {\r\n          this.isRefreshing = false;\r\n          this.refreshTokenSubject.next(token.jwt);\r\n          return next.handle(this.addToken(request, token.jwt));\r\n        }));\r\n\r\n    } else {\r\n      return this.refreshTokenSubject.pipe(\r\n        filter(token => token != null),\r\n        take(1),\r\n        switchMap(jwt => {\r\n          return next.handle(this.addToken(request, jwt));\r\n        }));\r\n    }\r\n  }\r\n}\r\n"]}