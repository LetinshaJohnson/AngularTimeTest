{"version":3,"sources":["webpack:///src/app/authentication/auth.guard.ts","webpack:///src/app/authentication/authentication-routing.module.ts","webpack:///src/app/authentication/authentication.module.ts","webpack:///src/app/authentication/authentication.service.ts","webpack:///src/app/authentication/forgot-password/forgot-password.component.ts","webpack:///src/app/authentication/forgot-password/forgot-password.component.html","webpack:///src/app/authentication/locked/locked.component.ts","webpack:///src/app/authentication/locked/locked.component.html","webpack:///src/app/authentication/page404/page404.component.ts","webpack:///src/app/authentication/page404/page404.component.html","webpack:///src/app/authentication/page500/page500.component.ts","webpack:///src/app/authentication/page500/page500.component.html","webpack:///src/app/authentication/random.guard.ts","webpack:///src/app/authentication/signin/signin.component.ts","webpack:///src/app/authentication/signin/signin.component.html","webpack:///src/app/authentication/signup/signup.component.ts","webpack:///src/app/authentication/signup/signup.component.html","webpack:///src/app/authentication/token.interceptor.ts"],"names":["AuthGuard","authService","router","isLoggedIn","navigate","providedIn","routes","path","redirectTo","pathMatch","component","AuthenticationRoutingModule","forChild","imports","exports","AuthenticationModule","provide","useClass","multi","declarations","providers","AuthService","httpClient","snackBar","JWT_TOKEN","REFRESH_TOKEN","API_URL","apiBaseURL","email","password","authData","user_email","user_password","post","pipe","tokens","Response","sessionStorage","setItem","toString","doLoginUser","showNotification","error","userData","console","log","colorName","text","placementFrom","placementAlign","open","duration","verticalPosition","horizontalPosition","panelClass","getRefreshToken","doLogoutUser","getJwtToken","storeJwtToken","Result","token","localStorage","getItem","loggedUser","storeTokens","removeTokens","jwt","user_id","refreshToken","removeItem","clear","ForgotPasswordComponent","formBuilder","route","submitted","loginForm","group","username","required","returnUrl","snapshot","queryParams","controls","invalid","onSubmit","selector","templateUrl","styleUrls","LockedComponent","hide","Page404Component","Page500Component","RandomGuard","SigninComponent","getAuthentication","value","subscribe","success","SignupComponent","http","chide","firstname","lastname","minLength","cpassword","authorization","Authorization","first_name","last_name","registerUser","TokenInterceptor","isRefreshing","refreshTokenSubject","request","next","addToken","handle","status","handle401Error","clone","setHeaders"],"mappings":"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","file":"authentication-authentication-module-es5.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { CanActivate,Router } from '@angular/router';\r\nimport { AuthService } from './authentication.service';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n  })\r\n  export class AuthGuard implements CanActivate {\r\n  \r\n    constructor(private authService: AuthService, private router: Router) { }\r\n  \r\n    canActivate() {\r\n      if (this.authService.isLoggedIn()) {\r\n        this.router.navigate(['/calendar']);\r\n      }\r\n      return !this.authService.isLoggedIn();\r\n    }\r\n  }","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { SigninComponent } from './signin/signin.component';\r\nimport { SignupComponent } from './signup/signup.component';\r\nimport { ForgotPasswordComponent } from './forgot-password/forgot-password.component';\r\nimport { LockedComponent } from './locked/locked.component';\r\nimport { Page404Component } from './page404/page404.component';\r\nimport { Page500Component } from './page500/page500.component';\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    redirectTo: 'signin',\r\n    pathMatch: 'full'\r\n  },\r\n  {\r\n    path: 'signin',\r\n    component: SigninComponent\r\n  },\r\n  {\r\n    path: 'signup',\r\n    component: SignupComponent\r\n  },\r\n  {\r\n    path: 'forgot-password',\r\n    component: ForgotPasswordComponent\r\n  },\r\n  {\r\n    path: 'locked',\r\n    component: LockedComponent\r\n  },\r\n  {\r\n    path: 'page404',\r\n    component: Page404Component\r\n  },\r\n  {\r\n    path: 'page500',\r\n    component: Page500Component\r\n  }\r\n];\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AuthenticationRoutingModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { AuthenticationRoutingModule } from './authentication-routing.module';\r\nimport { Page500Component } from './page500/page500.component';\r\nimport { Page404Component } from './page404/page404.component';\r\nimport { SigninComponent } from './signin/signin.component';\r\nimport { SignupComponent } from './signup/signup.component';\r\nimport { LockedComponent } from './locked/locked.component';\r\nimport { ForgotPasswordComponent } from './forgot-password/forgot-password.component';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { AuthGuard } from '../authentication/auth.guard';\r\nimport { RandomGuard } from '../authentication/random.guard';\r\nimport { AuthService } from '../authentication/authentication.service';\r\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\r\nimport { TokenInterceptor } from '../authentication/token.interceptor';\r\n@NgModule({\r\n  declarations: [\r\n    Page500Component,\r\n    Page404Component,\r\n    SigninComponent,\r\n    SignupComponent,\r\n    LockedComponent,\r\n    ForgotPasswordComponent\r\n  ],\r\n  providers:[\r\n    AuthGuard,\r\n    RandomGuard,\r\n    AuthService,\r\n    {\r\n      provide: HTTP_INTERCEPTORS,\r\n      useClass: TokenInterceptor,\r\n      multi:true\r\n    }\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    AuthenticationRoutingModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatIconModule,\r\n    MatButtonModule\r\n  ]\r\n})\r\nexport class AuthenticationModule {}\r\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { UserData } from '../data-model/user.model';\nimport { AuthData, RegisterUser, RequestData, EmailCheck, changePassword, changeUsername, UserOne } from './auth-data.model';\nimport { catchError, mapTo, tap } from 'rxjs/operators';\nimport { AuthenticationClass, RootObject } from '../classes/auth';\nimport { Token } from '../classes/token';\nimport { Observable, of } from 'rxjs';\nimport { environment } from '../../environments/environment';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n@Injectable({ providedIn: \"root\" })\nexport class AuthService {\n  private readonly JWT_TOKEN = 'JWT_TOKEN';\n  private readonly REFRESH_TOKEN = 'REFRESH_TOKEN';\n  private loggedUser: String;\n  private readonly API_URL = environment.apiBaseURL + 'auth/login';\n  //dialogData: any; authData\n  constructor(private httpClient: HttpClient, private router: Router,\n    private snackBar: MatSnackBar) {\n  }\n\n  /** CRUD METHODS */\n  getAuthentication(email: String, password: String): Observable<Boolean> {\n    try {\n      const authData: AuthData = { user_email: email, user_password: password };\n      return this.httpClient.post<RootObject>(environment.apiBaseURL + 'auth/login', authData)\n        .pipe(\n          tap(tokens => {\n            if (tokens.Response === \"Success\") {\n              sessionStorage.setItem(\"login_pswd\", password.toString());\n              this.doLoginUser(email, tokens);\n            } else {\n              this.showNotification(\n                'snackbar-danger',\n                'Invalid User',\n                'bottom',\n                'center'\n              );\n              return of(false);\n            }\n            //sessionStorage.setItem(\"login_id\", tokens);\n          }\n          ),\n          mapTo(true),\n          catchError(error => {\n            this.showNotification(\n              'snackbar-danger',\n              'Invalid User',\n              'bottom',\n              'center'\n            );\n            return of(false);\n          }));\n\n    } catch (error) {\n      //console.log(error);\n    }\n\n  }\n\n  registerUser(userData: UserData): Observable<Boolean> {\n    try {\n      console.log(userData);\n      //const authorization = { Authorization: `${sessionStorage.getItem(\"authorization\")}` };\n      // const registerData: RegisterUser = { user_first_name: userData.first_name, user_last_name: userData.last_name, user_email: userData.email, user_password: userData.password};\n      return this.httpClient.post<any>(environment.apiBaseURL + 'user/user_registration', userData);\n    } catch (error) {\n      \n    }\n\n  }\n\n  showNotification(colorName, text, placementFrom, placementAlign) {\n    this.snackBar.open(text, '', {\n      duration: 2000,\n      verticalPosition: placementFrom,\n      horizontalPosition: placementAlign,\n      panelClass: colorName,\n    });\n  }\n\n  logout() {\n    return this.httpClient.post<any>(environment.apiBaseURL + 'auth/logout', {\n      'refreshToken': this.getRefreshToken()\n    }).pipe(\n      tap(() => this.doLogoutUser()),\n      mapTo(true),\n      catchError(error => {\n        //(error.error);\n        return error.error;\n      }));\n  }\n\n  \n  isLoggedIn() {\n    return !!this.getJwtToken();\n  }\n\n  refreshToken() {\n    //alert(\"tokk \" + this.getRefreshToken());\n    return this.httpClient.post<any>(environment.apiBaseURL + 'auth/refresh', {\n      'refreshToken': this.getRefreshToken()\n    }).pipe(tap((tokens: RootObject) => {\n      //console.log(\"refreshed\");\n      this.storeJwtToken(tokens.Result[0].token);\n    }));\n  }\n\n  getJwtToken() {\n    return localStorage.getItem(this.JWT_TOKEN);\n  }\n\n  private doLoginUser(email: String, tokens: RootObject) {\n    this.loggedUser = email;\n    this.storeTokens(tokens);\n  }\n\n  private doLogoutUser() {\n    this.loggedUser = null;\n    this.removeTokens();\n  }\n\n  private getRefreshToken() {\n    return localStorage.getItem(this.REFRESH_TOKEN);\n  }\n\n  private storeJwtToken(jwt: string) {\n    localStorage.setItem(this.JWT_TOKEN, jwt);\n  }\n\n  private storeTokens(tokens: RootObject) {\n    sessionStorage.setItem(\"user_id\", tokens.Result[0].user_id.toString());\n    sessionStorage.setItem(\"tabIndex\", \"1\");\n    sessionStorage.setItem(\"authorization\", tokens.Result[0].token);\n    localStorage.setItem(this.JWT_TOKEN, tokens.Result[0].token);\n    localStorage.setItem(this.REFRESH_TOKEN, tokens.Result[0].refreshToken);\n  }\n\n  private removeTokens() {\n    localStorage.removeItem(this.JWT_TOKEN);\n    localStorage.removeItem(this.REFRESH_TOKEN);\n    sessionStorage.clear();\n    this.router.navigate(['/authentication/signin']);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\n@Component({\r\n  selector: 'app-forgot-password',\r\n  templateUrl: './forgot-password.component.html',\r\n  styleUrls: ['./forgot-password.component.scss']\r\n})\r\nexport class ForgotPasswordComponent implements OnInit {\r\n  loginForm: FormGroup;\r\n  submitted = false;\r\n  returnUrl: string;\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private route: ActivatedRoute,\r\n    private router: Router\r\n  ) {}\r\n  ngOnInit() {\r\n    this.loginForm = this.formBuilder.group({\r\n      username: ['', Validators.required]\r\n    });\r\n    // get return url from route parameters or default to '/'\r\n    this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\r\n  }\r\n  get f() {\r\n    return this.loginForm.controls;\r\n  }\r\n  onSubmit() {\r\n    this.submitted = true;\r\n    // stop here if form is invalid\r\n    if (this.loginForm.invalid) {\r\n      return;\r\n    } else {\r\n      this.router.navigate(['/dashboard/main']);\r\n    }\r\n  }\r\n}\r\n","<div class=\"limiter\">\r\n  <div class=\"container-login100\">\r\n    <div class=\"wrap-login100\">\r\n      <form class=\"login100-form validate-form\" [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\">\r\n        <span class=\"login100-form-title p-b-45\">\r\n          Reset Password\r\n        </span>\r\n        <span class=\"error-subheader2 p-t-20 p-b-15\">\r\n          Enter your registered email address.\r\n        </span>\r\n        <div class=\"form-group mb-5\">\r\n          <mat-form-field class=\"example-full-width\" appearance=\"outline\">\r\n            <mat-label>Username</mat-label>\r\n            <input matInput formControlName=\"username\" required>\r\n            <mat-icon matSuffix>face</mat-icon>\r\n            <mat-error *ngIf=\"loginForm.get('username').hasError('required')\">\r\n              Username is required\r\n            </mat-error>\r\n          </mat-form-field>\r\n        </div>\r\n        <div class=\"container-login100-form-btn\">\r\n          <button mat-flat-button color=\"primary\" class=\"login100-form-btn\" type=\"submit\">\r\n            Reset My Password\r\n          </button>\r\n        </div>\r\n        <div class=\"w-full p-t-25 text-center\">\r\n          <div>\r\n            <a routerLink=\"/authentication/signin\" class=\"txt1\">\r\n              Login?\r\n            </a>\r\n          </div>\r\n        </div>\r\n      </form>\r\n      <div class=\"login100-more\" style=\"background-image: url('assets/images/pages/bg-02.png');\">\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\n@Component({\r\n  selector: 'app-locked',\r\n  templateUrl: './locked.component.html',\r\n  styleUrls: ['./locked.component.scss']\r\n})\r\nexport class LockedComponent implements OnInit {\r\n  loginForm: FormGroup;\r\n  submitted = false;\r\n  returnUrl: string;\r\n  hide = true;\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private route: ActivatedRoute,\r\n    private router: Router\r\n  ) {}\r\n  ngOnInit() {\r\n    this.loginForm = this.formBuilder.group({\r\n      password: ['', Validators.required]\r\n    });\r\n    // get return url from route parameters or default to '/'\r\n    this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\r\n  }\r\n  get f() {\r\n    return this.loginForm.controls;\r\n  }\r\n  onSubmit() {\r\n    this.submitted = true;\r\n    // stop here if form is invalid\r\n    if (this.loginForm.invalid) {\r\n      return;\r\n    } else {\r\n      this.router.navigate(['/dashboard/main']);\r\n    }\r\n  }\r\n}\r\n","<div class=\"limiter\">\r\n  <div class=\"container-login100\">\r\n    <div class=\"wrap-login100\">\r\n      <form class=\"login100-form validate-form\" [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\">\r\n        <div class=\"login100-form-logo\">\r\n          <div class=\"image\">\r\n            <img src=\"assets/images/usrbig.jpg\" alt=\"User\">\r\n          </div>\r\n        </div>\r\n        <span class=\"login100-form-title p-b-34 p-t-27\">\r\n          Emily Smith\r\n        </span>\r\n        <div class=\"text-center\">\r\n          <p class=\"txt1 p-b-20\">\r\n            Locked\r\n          </p>\r\n        </div>\r\n        <div class=\"form-group mb-3\">\r\n          <mat-form-field class=\"example-full-width\" appearance=\"outline\">\r\n            <mat-label>Password</mat-label>\r\n            <input matInput formControlName=\"password\" [type]=\"hide ? 'password' : 'text'\" required>\r\n            <mat-icon matSuffix (click)=\"hide = !hide\">\r\n              {{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\r\n            <mat-error *ngIf=\"loginForm.get('password').hasError('required')\">\r\n              Password is required\r\n            </mat-error>\r\n          </mat-form-field>\r\n        </div>\r\n        <div class=\"container-login100-form-btn p-t-30\">\r\n          <button mat-flat-button color=\"primary\" class=\"login100-form-btn\">\r\n            Login\r\n          </button>\r\n        </div>\r\n        <div class=\"w-full p-t-15 p-b-15 text-center\">\r\n          <div>\r\n            <a href=\"#\" class=\"txt1\">\r\n              Need Help?\r\n            </a>\r\n          </div>\r\n        </div>\r\n      </form>\r\n      <div class=\"login100-more\" style=\"background-image: url('assets/images/pages/bg-01.png');\">\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\n@Component({\r\n  selector: 'app-page404',\r\n  templateUrl: './page404.component.html',\r\n  styleUrls: ['./page404.component.scss'],\r\n})\r\nexport class Page404Component implements OnInit {\r\n  constructor() {}\r\n  ngOnInit() {}\r\n}\r\n","<div class=\"limiter\">\r\n  <div class=\"container-login100\">\r\n    <div class=\"wrap-login100\">\r\n      <form class=\"login100-form\">\r\n        <span class=\"error-header p-b-45\">\r\n          404\r\n        </span>\r\n        <span class=\"error-subheader p-b-5\">\r\n          Looks Like You're Lost\r\n        </span>\r\n        <span class=\"error-subheader2 p-b-5\">\r\n          The Page You Are Looking For Not Available!\r\n        </span>\r\n        <div class=\"container-login100-form-btn p-t-30\t\">\r\n          <button mat-flat-button color=\"primary\" class=\"login100-form-btn\">\r\n            Go To Home Page\r\n          </button>\r\n        </div>\r\n        <div class=\"w-full p-t-15 p-b-15 text-center\">\r\n          <div>\r\n            <a href=\"#\" class=\"txt1\">\r\n              Need Help?\r\n            </a>\r\n          </div>\r\n        </div>\r\n      </form>\r\n      <div class=\"login100-more\" style=\"background-image: url('assets/images/pages/bg-03.png');\">\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\n@Component({\r\n  selector: 'app-page500',\r\n  templateUrl: './page500.component.html',\r\n  styleUrls: ['./page500.component.scss'],\r\n})\r\nexport class Page500Component implements OnInit {\r\n  constructor() {}\r\n  ngOnInit() {}\r\n}\r\n","<div class=\"limiter\">\r\n  <div class=\"container-login100\">\r\n    <div class=\"wrap-login100\">\r\n      <form class=\"login100-form\">\r\n        <span class=\"error-header p-b-45\">\r\n          500\r\n        </span>\r\n        <span class=\"error-subheader2 p-b-5\">\r\n          Oops, Something went wrong. Please try after some times.\r\n        </span>\r\n        <div class=\"container-login100-form-btn p-t-30\t\">\r\n          <button mat-flat-button color=\"primary\" class=\"login100-form-btn\">\r\n            Go To Home Page\r\n          </button>\r\n        </div>\r\n        <div class=\"w-full p-t-15 p-b-15 text-center\">\r\n          <div>\r\n            <a href=\"#\" class=\"txt1\">\r\n              Need Help?\r\n            </a>\r\n          </div>\r\n        </div>\r\n      </form>\r\n      <div class=\"login100-more\" style=\"background-image: url('assets/images/pages/bg-03.png');\">\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>","import { Injectable } from '@angular/core';\r\nimport { CanActivate,CanLoad,Router } from '@angular/router';\r\nimport { AuthService } from './authentication.service';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n  })\r\n  export class RandomGuard implements CanActivate,CanLoad {\r\n  \r\n    constructor(private authService: AuthService, private router: Router) { }\r\n  \r\n    canActivate() {\r\n      if (this.authService.isLoggedIn()) {\r\n        this.router.navigate(['/calendar']);\r\n      }\r\n      return !this.authService.isLoggedIn();\r\n    }\r\n\r\n    canLoad() {\r\n      if (this.authService.isLoggedIn()) {\r\n        this.router.navigate(['/calendar']);\r\n      }\r\n      return !this.authService.isLoggedIn();\r\n    }\r\n  }","import { Component, OnInit } from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { AuthService } from '../authentication.service';\r\nimport { AuthenticationClass, RootObject } from '../../classes/auth';\r\n//import { SessionStorageService } from 'ngx-webstorage';\r\n@Component({\r\n  selector: 'app-signin',\r\n  templateUrl: './signin.component.html',\r\n  styleUrls: ['./signin.component.scss']\r\n})\r\nexport class SigninComponent implements OnInit {\r\n  loginForm: FormGroup;\r\n  submitted = false;\r\n  returnUrl: string;\r\n  public sessiondata;\r\n  hide = true;\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private route: ActivatedRoute,\r\n    public authService: AuthService,\r\n    private router: Router\r\n  ) {}\r\n  ngOnInit() {\r\n    this.loginForm = this.formBuilder.group({\r\n      email: [''],\r\n      password: ['']\r\n    });\r\n    // get return url from route parameters or default to '/'\r\n    this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\r\n  }\r\n  get f() {\r\n    return this.loginForm.controls;\r\n  }\r\n  onSubmit() {\r\n    this.submitted = true;\r\n    if (this.loginForm.invalid) {\r\n      return;\r\n    } else {\r\n      //this.router.navigate(['/calendar']);\r\n      this.authService.getAuthentication(this.loginForm.value.email, this.loginForm.value.password)\r\n        .subscribe(success => {\r\n          if (success) {\r\n            //this.sessiondata = sessionStorage.getItem(\"role\");\r\n            //console.log(sessionStorage.getItem(\"role\"));\r\n            this.router.navigate(['/calendar']);\r\n          }\r\n        });\r\n    }\r\n  }\r\n}\r\n","<div class=\"limiter\">\r\n  <div class=\"container-login100\">\r\n    <div class=\"wrap-login100\">\r\n      <form class=\"login100-form validate-form\" [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\">\r\n        <span class=\"login100-form-title pb-5\">\r\n          Login\r\n        </span>\r\n        <div class=\"row\">\r\n          <div class=\"col-xl-12 col-lg-12 col-md-12 col-sm-12 mb-2\">\r\n            <mat-form-field class=\"example-full-width\" appearance=\"outline\">\r\n              <mat-label>Email</mat-label>\r\n              <input matInput formControlName=\"email\" />\r\n              <mat-icon matSuffix>face</mat-icon>\r\n            </mat-form-field>\r\n          </div>\r\n        </div>\r\n        <div class=\"row\">\r\n          <div class=\"col-xl-12col-lg-12 col-md-12 col-sm-12 mb-2\">\r\n            <mat-form-field class=\"example-full-width\" appearance=\"outline\">\r\n              <mat-label>Password</mat-label>\r\n              <input matInput type=\"password\" formControlName=\"password\">\r\n              <mat-icon matSuffix>vpn_key</mat-icon>\r\n            </mat-form-field>\r\n          </div>\r\n        </div>\r\n        <!-- <div class=\"flex-sb-m w-full p-t-15 p-b-20\">\r\n          <div class=\"form-check\">\r\n            <label class=\"form-check-label\">\r\n              <input class=\"form-check-input\" type=\"checkbox\" value=\"\"> Remember me\r\n              <span class=\"form-check-sign\">\r\n                <span class=\"check\"></span>\r\n              </span>\r\n            </label>\r\n          </div>\r\n          <div>\r\n            <a class=\"txt1\" routerLink=\"/authentication/forgot-password\">Forgot Password?</a>\r\n          </div>\r\n        </div> -->\r\n        <div class=\"container-login100-form-btn\">\r\n          <button mat-flat-button color=\"primary\" class=\"login100-form-btn\" type=\"submit\">\r\n            Login\r\n          </button>\r\n        </div>\r\n        <div class=\"text-center p-t-30 p-b-20\">\r\n          <span class=\"txt3\">\r\n            <a routerLink=\"/authentication/signup\">\r\n              sign up\r\n            </a> \r\n          </span>\r\n        </div>\r\n        <!-- <div class=\"login100-form-social flex-c-m\">\r\n          <a href=\"#\" class=\"login100-form-social-item flex-c-m bg1 m-r-5\">\r\n            <i class=\"fab fa-facebook-f\"></i>\r\n          </a>\r\n          <a href=\"#\" class=\"login100-form-social-item flex-c-m bg2 m-r-5\">\r\n            <i class=\"fab fa-twitter\"></i>\r\n          </a>\r\n        </div> -->\r\n      </form>\r\n    </div>\r\n  </div>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { UserData } from '../../data-model/user.model';\r\nimport { AuthService } from '../authentication.service';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\n@Component({\r\n  selector: 'app-signup',\r\n  templateUrl: './signup.component.html',\r\n  styleUrls: ['./signup.component.scss']\r\n})\r\nexport class SignupComponent implements OnInit {\r\n  loginForm: FormGroup;\r\n  submitted = false;\r\n  returnUrl: string;\r\n  hide = true;\r\n  public sessiondata;\r\n  chide = true;\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private route: ActivatedRoute,\r\n    private http: HttpClient,\r\n    public authService: AuthService,\r\n    private router: Router\r\n  ) { }\r\n  ngOnInit() {\r\n    this.loginForm = this.formBuilder.group({\r\n      firstname: ['', Validators.required],\r\n      lastname: ['', Validators.required],\r\n      email: [\r\n        '',\r\n        [Validators.required, Validators.email, Validators.minLength(5)]\r\n      ],\r\n      password: ['', Validators.required],\r\n      cpassword: ['', Validators.required]\r\n    });\r\n    // get return url from route parameters or default to '/'\r\n    this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\r\n  }\r\n  get f() {\r\n    return this.loginForm.controls;\r\n  }\r\n  onSubmit() {\r\n    this.submitted = true;\r\n    // stop here if form is invalid\r\n    if (this.loginForm.invalid) {\r\n      return;\r\n    }\r\n    //this.userData = new UserData({})\r\n    const authorization = { Authorization: `${sessionStorage.getItem(\"authorization\")}` };\r\n    const userData: any = {\r\n      first_name: this.loginForm.value.firstname,\r\n      last_name: this.loginForm.value.lastname,\r\n      email: this.loginForm.value.email,\r\n      password: this.loginForm.value.password,\r\n      authorization:authorization\r\n    };\r\n    this.authService.registerUser(userData)\r\n      .subscribe(success => {\r\n        if (success) {\r\n          this.router.navigate(['/authentication/signin']);\r\n        }\r\n      });\r\n\r\n    // // Initialize Params Object\r\n    // let Params = new HttpParams();\r\n    // // Begin assigning parameters\r\n    // Params = Params.append('firstname', this.loginForm.value.firstname);\r\n    // Params = Params.append('lastname', this.loginForm.value.lastname);\r\n    // Params = Params.append('email', this.loginForm.value.email);\r\n    // Params = Params.append('password', this.loginForm.value.password);\r\n    // return this.http.post('http://localhost:8000/api/signup'\r\n    //   , {\r\n    //     params: { params: Params }\r\n    //   }).subscribe((res: Response) => {\r\n    //     alert(res);\r\n    //     //this.registerForm.reset();\r\n    //   })\r\n\r\n\r\n  }\r\n}\r\n","<div class=\"limiter\">\r\n  <div class=\"container-login100\">\r\n    <div class=\"wrap-login100\">\r\n      <form class=\"login100-form validate-form\" [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\">\r\n        <span class=\"login100-form-title p-b-30\">\r\n          Register\r\n        </span>\r\n        <mat-form-field class=\"example-full-width\" appearance=\"outline\">\r\n          <mat-label>First Name</mat-label>\r\n          <input matInput formControlName=\"firstname\" required>\r\n          <mat-icon matSuffix>face</mat-icon>\r\n          <mat-error *ngIf=\"loginForm.get('firstname').hasError('required')\">\r\n            First Name is required\r\n          </mat-error>\r\n        </mat-form-field>\r\n        <mat-form-field class=\"example-full-width\" appearance=\"outline\">\r\n          <mat-label>Last Name</mat-label>\r\n          <input matInput formControlName=\"lastname\" required>\r\n          <mat-icon matSuffix>face</mat-icon>\r\n          <mat-error *ngIf=\"loginForm.get('lastname').hasError('required')\">\r\n            Last Name is required\r\n          </mat-error>\r\n        </mat-form-field>\r\n        <mat-form-field class=\"example-full-width\" appearance=\"outline\">\r\n          <mat-label>Email</mat-label>\r\n          <input matInput formControlName=\"email\" required>\r\n          <mat-icon matSuffix>mail</mat-icon>\r\n          <mat-error *ngIf=\"loginForm.get('email').hasError('required') || loginForm.get('email').touched\">\r\n            Please enter a valid email address\r\n          </mat-error>\r\n        </mat-form-field>\r\n        <mat-form-field class=\"example-full-width\" appearance=\"outline\">\r\n          <mat-label>Password</mat-label>\r\n          <input matInput formControlName=\"password\" [type]=\"hide ? 'password' : 'text'\" required>\r\n          <mat-icon matSuffix (click)=\"hide = !hide\">\r\n            {{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\r\n          <mat-error *ngIf=\"loginForm.get('password').hasError('required')\">\r\n            Password is required\r\n          </mat-error>\r\n        </mat-form-field>\r\n        <mat-form-field class=\"example-full-width\" appearance=\"outline\">\r\n          <mat-label>Confirm Password</mat-label>\r\n          <input matInput formControlName=\"cpassword\" [type]=\"chide ? 'password' : 'text'\" required>\r\n          <mat-icon matSuffix (click)=\"chide = !chide\">\r\n            {{chide ? 'visibility_off' : 'visibility'}}</mat-icon>\r\n          <mat-error *ngIf=\"loginForm.get('cpassword').hasError('required')\">\r\n            Confirm Password is required\r\n          </mat-error>\r\n        </mat-form-field>\r\n        <div class=\"flex-sb-m w-full p-t-15 p-b-20\">\r\n          <div>\r\n            <span>Already Registered? <a routerLink=\"/authentication/signin\">\r\n                Login\r\n              </a></span>\r\n          </div>\r\n        </div>\r\n        <div class=\"container-login100-form-btn\">\r\n          <button mat-flat-button color=\"primary\" class=\"login100-form-btn\" type=\"submit\">\r\n            Register\r\n          </button>\r\n        </div>\r\n        <!-- <div class=\"text-center p-t-30 p-b-20\">\r\n          <span class=\"txt2\">\r\n            or sign up using\r\n          </span>\r\n        </div>\r\n        <div class=\"login100-form-social flex-c-m\">\r\n          <a href=\"#\" class=\"login100-form-social-item flex-c-m bg1 m-r-5\">\r\n            <i class=\"fab fa-facebook-f\"></i>\r\n          </a>\r\n          <a href=\"#\" class=\"login100-form-social-item flex-c-m bg2 m-r-5\">\r\n            <i class=\"fab fa-twitter\"></i>\r\n          </a>\r\n        </div> -->\r\n      </form>\r\n      <div class=\"login100-more\" style=\"background-image: url('assets/images/pages/bg-02.png');\">\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>","import { Injectable } from '@angular/core';\r\nimport { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor, HttpErrorResponse } from '@angular/common/http';\r\nimport { AuthService } from './authentication.service';\r\nimport { Observable, throwError, BehaviorSubject } from 'rxjs';\r\nimport { catchError, filter, take, switchMap } from 'rxjs/operators';\r\n\r\n@Injectable()\r\nexport class TokenInterceptor implements HttpInterceptor {\r\n\r\n  private isRefreshing = false;\r\n  private refreshTokenSubject: BehaviorSubject<any> = new BehaviorSubject<any>(null);\r\n\r\n  constructor(public authService: AuthService) { }\r\n\r\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n\r\n    if (this.authService.getJwtToken()) {\r\n      request = this.addToken(request, this.authService.getJwtToken());\r\n    }\r\n\r\n    return next.handle(request).pipe(catchError(error => {\r\n      if (error instanceof HttpErrorResponse && error.status === 401) {\r\n        console.log(\"errorrrr\");\r\n        return this.handle401Error(request, next);\r\n      } else {\r\n        return throwError(error);\r\n      }\r\n    }));\r\n  }\r\n\r\n  private addToken(request: HttpRequest<any>, token: string) {\r\n    return request.clone({\r\n      setHeaders: {\r\n        'Authorization': `Bearer ${token}`\r\n      }\r\n    });\r\n  }\r\n\r\n  private handle401Error(request: HttpRequest<any>, next: HttpHandler) {\r\n    if (!this.isRefreshing) {\r\n      this.isRefreshing = true;\r\n      this.refreshTokenSubject.next(null);\r\n\r\n      return this.authService.refreshToken().pipe(\r\n        switchMap((token: any) => {\r\n          this.isRefreshing = false;\r\n          this.refreshTokenSubject.next(token.jwt);\r\n          return next.handle(this.addToken(request, token.jwt));\r\n        }));\r\n\r\n    } else {\r\n      return this.refreshTokenSubject.pipe(\r\n        filter(token => token != null),\r\n        take(1),\r\n        switchMap(jwt => {\r\n          return next.handle(this.addToken(request, jwt));\r\n        }));\r\n    }\r\n  }\r\n}\r\n"]}